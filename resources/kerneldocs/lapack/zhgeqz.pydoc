(('zhgeqz', 'ZHGEQZ computes the eigenvalues of a complex matrix pair (H,T),\nwhere H is an upper Hessenberg matrix and T is upper triangular,\nusing the single-shift QZ method.\nMatrix pairs of this type are produced by the reduction to\ngeneralized upper Hessenberg form of a complex matrix pair (A,B):\n\n   A = Q1*H*Z1**H,  B = Q1*T*Z1**H,\n\nas computed by ZGGHRD.\n\nIf JOB=\'S\', then the Hessenberg-triangular pair (H,T) is\nalso reduced to generalized Schur form,\n\n   H = Q*S*Z**H,  T = Q*P*Z**H,\n\nwhere Q and Z are unitary matrices and S and P are upper triangular.\n\nOptionally, the unitary matrix Q from the generalized Schur\nfactorization may be postmultiplied into an input matrix Q1, and the\nunitary matrix Z may be postmultiplied into an input matrix Z1.\nIf Q1 and Z1 are the unitary matrices from ZGGHRD that reduced\nthe matrix pair (A,B) to generalized Hessenberg form, then the output\nmatrices Q1*Q and Z1*Z are the unitary factors from the generalized\nSchur factorization of (A,B):\n\n   A = (Q1*Q)*S*(Z1*Z)**H,  B = (Q1*Q)*P*(Z1*Z)**H.\n\nTo avoid overflow, eigenvalues of the matrix pair (H,T)\n(equivalently, of (A,B)) are computed as a pair of complex values\n(alpha,beta).  If beta is nonzero, lambda = alpha / beta is an\neigenvalue of the generalized nonsymmetric eigenvalue problem (GNEP)\n   A*x = lambda*B*x\nand if alpha is nonzero, mu = beta / alpha is an eigenvalue of the\nalternate form of the GNEP\n   mu*A*y = B*y.\nThe values of alpha and beta for the i-th eigenvalue can be read\ndirectly from the generalized Schur form:  alpha = S(i,i),\nbeta = P(i,i).\n\nRef: C.B. Moler & G.W. Stewart, "An Algorithm for Generalized Matrix\n     Eigenvalue Problems", SIAM J. Numer. Anal., 10(1973),\n     pp. 241--256.'), ('JOB', "JOB is CHARACTER*1\n= 'E': Compute eigenvalues only;\n= 'S': Computer eigenvalues and the Schur form."), ('COMPQ', "COMPQ is CHARACTER*1\n= 'N': Left Schur vectors (Q) are not computed;\n= 'I': Q is initialized to the unit matrix and the matrix Q\n       of left Schur vectors of (H,T) is returned;\n= 'V': Q must contain a unitary matrix Q1 on entry and\n       the product Q1*Q is returned."), ('COMPZ', "COMPZ is CHARACTER*1\n= 'N': Right Schur vectors (Z) are not computed;\n= 'I': Q is initialized to the unit matrix and the matrix Z\n       of right Schur vectors of (H,T) is returned;\n= 'V': Z must contain a unitary matrix Z1 on entry and\n       the product Z1*Z is returned."), ('N', 'N is INTEGER\nThe order of the matrices H, T, Q, and Z.  N >= 0.'), ('ILO', 'ILO is INTEGER'), ('IHI', 'IHI is INTEGER\nILO and IHI mark the rows and columns of H which are in\nHessenberg form.  It is assumed that A is already upper\ntriangular in rows and columns 1:ILO-1 and IHI+1:N.\nIf N > 0, 1 <= ILO <= IHI <= N; if N = 0, ILO=1 and IHI=0.'), ('H', "H is COMPLEX*16 array, dimension (LDH, N)\nOn entry, the N-by-N upper Hessenberg matrix H.\nOn exit, if JOB = 'S', H contains the upper triangular\nmatrix S from the generalized Schur factorization.\nIf JOB = 'E', the diagonal of H matches that of S, but\nthe rest of H is unspecified."), ('LDH', 'LDH is INTEGER\nThe leading dimension of the array H.  LDH >= max( 1, N ).'), ('T', "T is COMPLEX*16 array, dimension (LDT, N)\nOn entry, the N-by-N upper triangular matrix T.\nOn exit, if JOB = 'S', T contains the upper triangular\nmatrix P from the generalized Schur factorization.\nIf JOB = 'E', the diagonal of T matches that of P, but\nthe rest of T is unspecified."), ('LDT', 'LDT is INTEGER\nThe leading dimension of the array T.  LDT >= max( 1, N ).'), ('ALPHA', 'ALPHA is COMPLEX*16 array, dimension (N)\nThe complex scalars alpha that define the eigenvalues of\nGNEP.  ALPHA(i) = S(i,i) in the generalized Schur\nfactorization.'), ('BETA', 'BETA is COMPLEX*16 array, dimension (N)\nThe real non-negative scalars beta that define the\neigenvalues of GNEP.  BETA(i) = P(i,i) in the generalized\nSchur factorization.\n\nTogether, the quantities alpha = ALPHA(j) and beta = BETA(j)\nrepresent the j-th eigenvalue of the matrix pair (A,B), in\none of the forms lambda = alpha/beta or mu = beta/alpha.\nSince either lambda or mu may overflow, they should not,\nin general, be computed.'), ('Q', "Q is COMPLEX*16 array, dimension (LDQ, N)\nOn entry, if COMPZ = 'V', the unitary matrix Q1 used in the\nreduction of (A,B) to generalized Hessenberg form.\nOn exit, if COMPZ = 'I', the unitary matrix of left Schur\nvectors of (H,T), and if COMPZ = 'V', the unitary matrix of\nleft Schur vectors of (A,B).\nNot referenced if COMPZ = 'N'."), ('LDQ', "LDQ is INTEGER\nThe leading dimension of the array Q.  LDQ >= 1.\nIf COMPQ='V' or 'I', then LDQ >= N."), ('Z', "Z is COMPLEX*16 array, dimension (LDZ, N)\nOn entry, if COMPZ = 'V', the unitary matrix Z1 used in the\nreduction of (A,B) to generalized Hessenberg form.\nOn exit, if COMPZ = 'I', the unitary matrix of right Schur\nvectors of (H,T), and if COMPZ = 'V', the unitary matrix of\nright Schur vectors of (A,B).\nNot referenced if COMPZ = 'N'."), ('LDZ', "LDZ is INTEGER\nThe leading dimension of the array Z.  LDZ >= 1.\nIf COMPZ='V' or 'I', then LDZ >= N."), ('WORK', 'WORK is COMPLEX*16 array, dimension (MAX(1,LWORK))\nOn exit, if INFO >= 0, WORK(1) returns the optimal LWORK.'), ('LWORK', 'LWORK is INTEGER\nThe dimension of the array WORK.  LWORK >= max(1,N).\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal size of the WORK array, returns\nthis value as the first entry of the WORK array, and no error\nmessage related to LWORK is issued by XERBLA.'), ('RWORK', 'RWORK is DOUBLE PRECISION array, dimension (N)'), ('INFO', 'INFO is INTEGER\n= 0: successful exit\n< 0: if INFO = -i, the i-th argument had an illegal value\n= 1,...,N: the QZ iteration did not converge.  (H,T) is not\n           in Schur form, but ALPHA(i) and BETA(i),\n           i=INFO+1,...,N should be correct.\n= N+1,...,2*N: the shift calculation failed.  (H,T) is not\n           in Schur form, but ALPHA(i) and BETA(i),\n           i=INFO-N+1,...,N should be correct.'))
