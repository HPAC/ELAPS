(('cbbcsd', 'CBBCSD computes the CS decomposition of a unitary matrix in\nbidiagonal-block form,\n\n\n    [ B11 | B12 0  0 ]\n    [  0  |  0 -I  0 ]\nX = [----------------]\n    [ B21 | B22 0  0 ]\n    [  0  |  0  0  I ]\n\n                              [  C | -S  0  0 ]\n                  [ U1 |    ] [  0 |  0 -I  0 ] [ V1 |    ]**H\n                = [---------] [---------------] [---------]   .\n                  [    | U2 ] [  S |  C  0  0 ] [    | V2 ]\n                              [  0 |  0  0  I ]\n\nX is M-by-M, its top-left block is P-by-Q, and Q must be no larger\nthan P, M-P, or M-Q. (If Q is not the smallest index, then X must be\ntransposed and/or permuted. This can be done in constant time using\nthe TRANS and SIGNS options. See CUNCSD for details.)\n\nThe bidiagonal matrices B11, B12, B21, and B22 are represented\nimplicitly by angles THETA(1:Q) and PHI(1:Q-1).\n\nThe unitary matrices U1, U2, V1T, and V2T are input/output.\nThe input matrices are pre- or post-multiplied by the appropriate\nsingular vector matrices.'), ('JOBU1', "JOBU1 is CHARACTER\n= 'Y':      U1 is updated;\notherwise:  U1 is not updated."), ('JOBU2', "JOBU2 is CHARACTER\n= 'Y':      U2 is updated;\notherwise:  U2 is not updated."), ('JOBV1T', "JOBV1T is CHARACTER\n= 'Y':      V1T is updated;\notherwise:  V1T is not updated."), ('JOBV2T', "JOBV2T is CHARACTER\n= 'Y':      V2T is updated;\notherwise:  V2T is not updated."), ('TRANS', "TRANS is CHARACTER\n= 'T':      X, U1, U2, V1T, and V2T are stored in row-major\n            order;\notherwise:  X, U1, U2, V1T, and V2T are stored in column-\n            major order."), ('M', 'M is INTEGER\nThe number of rows and columns in X, the unitary matrix in\nbidiagonal-block form.'), ('P', 'P is INTEGER\nThe number of rows in the top-left block of X. 0 <= P <= M.'), ('Q', 'Q is INTEGER\nThe number of columns in the top-left block of X.\n0 <= Q <= MIN(P,M-P,M-Q).'), ('THETA', 'THETA is REAL array, dimension (Q)\nOn entry, the angles THETA(1),...,THETA(Q) that, along with\nPHI(1), ...,PHI(Q-1), define the matrix in bidiagonal-block\nform. On exit, the angles whose cosines and sines define the\ndiagonal blocks in the CS decomposition.'), ('PHI', 'PHI is REAL array, dimension (Q-1)\nThe angles PHI(1),...,PHI(Q-1) that, along with THETA(1),...,\nTHETA(Q), define the matrix in bidiagonal-block form.'), ('U1', 'U1 is COMPLEX array, dimension (LDU1,P)\nOn entry, an LDU1-by-P matrix. On exit, U1 is postmultiplied\nby the left singular vector matrix common to [ B11 ; 0 ] and\n[ B12 0 0 ; 0 -I 0 0 ].'), ('LDU1', 'LDU1 is INTEGER\nThe leading dimension of the array U1.'), ('U2', 'U2 is COMPLEX array, dimension (LDU2,M-P)\nOn entry, an LDU2-by-(M-P) matrix. On exit, U2 is\npostmultiplied by the left singular vector matrix common to\n[ B21 ; 0 ] and [ B22 0 0 ; 0 0 I ].'), ('LDU2', 'LDU2 is INTEGER\nThe leading dimension of the array U2.'), ('V1T', 'V1T is COMPLEX array, dimension (LDV1T,Q)\nOn entry, a LDV1T-by-Q matrix. On exit, V1T is premultiplied\nby the conjugate transpose of the right singular vector\nmatrix common to [ B11 ; 0 ] and [ B21 ; 0 ].'), ('LDV1T', 'LDV1T is INTEGER\nThe leading dimension of the array V1T.'), ('V2T', 'V2T is COMPLEX array, dimenison (LDV2T,M-Q)\nOn entry, a LDV2T-by-(M-Q) matrix. On exit, V2T is\npremultiplied by the conjugate transpose of the right\nsingular vector matrix common to [ B12 0 0 ; 0 -I 0 ] and\n[ B22 0 0 ; 0 0 I ].'), ('LDV2T', 'LDV2T is INTEGER\nThe leading dimension of the array V2T.'), ('B11D', 'B11D is REAL array, dimension (Q)\nWhen CBBCSD converges, B11D contains the cosines of THETA(1),\n..., THETA(Q). If CBBCSD fails to converge, then B11D\ncontains the diagonal of the partially reduced top-left\nblock.'), ('B11E', 'B11E is REAL array, dimension (Q-1)\nWhen CBBCSD converges, B11E contains zeros. If CBBCSD fails\nto converge, then B11E contains the superdiagonal of the\npartially reduced top-left block.'), ('B12D', 'B12D is REAL array, dimension (Q)\nWhen CBBCSD converges, B12D contains the negative sines of\nTHETA(1), ..., THETA(Q). If CBBCSD fails to converge, then\nB12D contains the diagonal of the partially reduced top-right\nblock.'), ('B12E', 'B12E is REAL array, dimension (Q-1)\nWhen CBBCSD converges, B12E contains zeros. If CBBCSD fails\nto converge, then B12E contains the subdiagonal of the\npartially reduced top-right block.'), ('B21D', 'B21D is REAL array, dimension (Q)\nWhen CBBCSD converges, B21D contains the negative sines of\nTHETA(1), ..., THETA(Q). If CBBCSD fails to converge, then\nB21D contains the diagonal of the partially reduced bottom-left\nblock.'), ('B21E', 'B21E is REAL array, dimension (Q-1)\nWhen CBBCSD converges, B21E contains zeros. If CBBCSD fails\nto converge, then B21E contains the subdiagonal of the\npartially reduced bottom-left block.'), ('B22D', 'B22D is REAL array, dimension (Q)\nWhen CBBCSD converges, B22D contains the negative sines of\nTHETA(1), ..., THETA(Q). If CBBCSD fails to converge, then\nB22D contains the diagonal of the partially reduced bottom-right\nblock.'), ('B22E', 'B22E is REAL array, dimension (Q-1)\nWhen CBBCSD converges, B22E contains zeros. If CBBCSD fails\nto converge, then B22E contains the subdiagonal of the\npartially reduced bottom-right block.'), ('RWORK', 'RWORK is REAL array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LRWORK', 'LRWORK is INTEGER\nThe dimension of the array RWORK. LRWORK >= MAX(1,8*Q).\n\nIf LRWORK = -1, then a workspace query is assumed; the\nroutine only calculates the optimal size of the RWORK array,\nreturns this value as the first entry of the work array, and\nno error message related to LRWORK is issued by XERBLA.'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.\n> 0:  if CBBCSD did not converge, INFO specifies the number\n      of nonzero entries in PHI, and B11D, B11E, etc.,\n      contain the partially reduced matrix.'))
