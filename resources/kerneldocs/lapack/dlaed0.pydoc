(('dlaed0', 'DLAED0 computes all eigenvalues and corresponding eigenvectors of a\nsymmetric tridiagonal matrix using the divide and conquer method.'), ('ICOMPQ', 'ICOMPQ is INTEGER\n= 0:  Compute eigenvalues only.\n= 1:  Compute eigenvectors of original dense symmetric matrix\n      also.  On entry, Q contains the orthogonal matrix used\n      to reduce the original matrix to tridiagonal form.\n= 2:  Compute eigenvalues and eigenvectors of tridiagonal\n      matrix.'), ('QSIZ', 'QSIZ is INTEGER\nhe dimension of the orthogonal matrix used to reduce\nhe full matrix to tridiagonal form.  QSIZ >= N if ICOMPQ = 1.'), ('N', 'N is INTEGER\nhe dimension of the symmetric tridiagonal matrix.  N >= 0.'), ('D', 'D is DOUBLE PRECISION array, dimension (N)\nn entry, the main diagonal of the tridiagonal matrix.\nn exit, its eigenvalues.'), ('E', 'E is DOUBLE PRECISION array, dimension (N-1)\nhe off-diagonal elements of the tridiagonal matrix.\nn exit, E has been destroyed.'), ('Q', 'Q is DOUBLE PRECISION array, dimension (LDQ, N)\nn entry, Q must contain an N-by-N orthogonal matrix.\nf ICOMPQ = 0    Q is not referenced.\nf ICOMPQ = 1    On entry, Q is a subset of the columns of the\n                orthogonal matrix used to reduce the full\n                matrix to tridiagonal form corresponding to\n                the subset of the full matrix which is being\n                decomposed at this time.\nf ICOMPQ = 2    On entry, Q will be the identity matrix.\n                On exit, Q contains the eigenvectors of the\n                tridiagonal matrix.'), ('LDQ', 'LDQ is INTEGER\nhe leading dimension of the array Q.  If eigenvectors are\nesired, then  LDQ >= max(1,N).  In any case,  LDQ >= 1.'), ('QSTORE', 'QSTORE is DOUBLE PRECISION array, dimension (LDQS, N)\neferenced only when ICOMPQ = 1.  Used to store parts of\nhe eigenvector matrix when the updating matrix multiplies\nake place.'), ('LDQS', 'LDQS is INTEGER\nhe leading dimension of the array QSTORE.  If ICOMPQ = 1,\nhen  LDQS >= max(1,N).  In any case,  LDQS >= 1.'), ('WORK', 'WORK is DOUBLE PRECISION array,\nf ICOMPQ = 0 or 1, the dimension of WORK must be at least\n           1 + 3*N + 2*N*lg N + 3*N**2\n           ( lg( N ) = smallest integer k\n                       such that 2^k >= N )\nf ICOMPQ = 2, the dimension of WORK must be at least\n           4*N + N**2.'), ('IWORK', 'IWORK is INTEGER array,\nf ICOMPQ = 0 or 1, the dimension of IWORK must be at least\n              6 + 6*N + 5*N*lg N.\n              ( lg( N ) = smallest integer k\n                          such that 2^k >= N )\nf ICOMPQ = 2, the dimension of IWORK must be at least\n              3 + 5*N.'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.\n> 0:  The algorithm failed to compute an eigenvalue while\n      working on the submatrix lying in rows and columns\n      INFO/(N+1) through mod(INFO,N+1).'))
