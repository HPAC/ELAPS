(('cgegv', 'This routine is deprecated and has been replaced by routine CGGEV.\n\nCGEGV computes the eigenvalues and, optionally, the left and/or right\neigenvectors of a complex matrix pair (A,B).\nGiven two square matrices A and B,\nthe generalized nonsymmetric eigenvalue problem (GNEP) is to find the\neigenvalues lambda and corresponding (non-zero) eigenvectors x such\nthat\n   A*x = lambda*B*x.\n\nAn alternate form is to find the eigenvalues mu and corresponding\neigenvectors y such that\n   mu*A*y = B*y.\n\nThese two forms are equivalent with mu = 1/lambda and x = y if\nneither lambda nor mu is zero.  In order to deal with the case that\nlambda or mu is zero or small, two values alpha and beta are returned\nfor each eigenvalue, such that lambda = alpha/beta and\nmu = beta/alpha.\n\nThe vectors x and y in the above equations are right eigenvectors of\nthe matrix pair (A,B).  Vectors u and v satisfying\n   u**H*A = lambda*u**H*B  or  mu*v**H*A = v**H*B\nare left eigenvectors of (A,B).\n\nNote: this routine performs "full balancing" on A and B'), ('JOBVL', "JOBVL is CHARACTER*1\n= 'N':  do not compute the left generalized eigenvectors;\n= 'V':  compute the left generalized eigenvectors (returned\n        in VL)."), ('JOBVR', "JOBVR is CHARACTER*1\n= 'N':  do not compute the right generalized eigenvectors;\n= 'V':  compute the right generalized eigenvectors (returned\n        in VR)."), ('N', 'N is INTEGER\nThe order of the matrices A, B, VL, and VR.  N >= 0.'), ('A', "A is COMPLEX array, dimension (LDA, N)\nOn entry, the matrix A.\nIf JOBVL = 'V' or JOBVR = 'V', then on exit A\ncontains the Schur form of A from the generalized Schur\nfactorization of the pair (A,B) after balancing.  If no\neigenvectors were computed, then only the diagonal elements\nof the Schur form will be correct.  See CGGHRD and CHGEQZ\nfor details."), ('LDA', 'LDA is INTEGER\nThe leading dimension of A.  LDA >= max(1,N).'), ('B', "B is COMPLEX array, dimension (LDB, N)\nOn entry, the matrix B.\nIf JOBVL = 'V' or JOBVR = 'V', then on exit B contains the\nupper triangular matrix obtained from B in the generalized\nSchur factorization of the pair (A,B) after balancing.\nIf no eigenvectors were computed, then only the diagonal\nelements of B will be correct.  See CGGHRD and CHGEQZ for\ndetails."), ('LDB', 'LDB is INTEGER\nThe leading dimension of B.  LDB >= max(1,N).'), ('ALPHA', 'ALPHA is COMPLEX array, dimension (N)\nThe complex scalars alpha that define the eigenvalues of\nGNEP.'), ('BETA', 'BETA is COMPLEX array, dimension (N)\nThe complex scalars beta that define the eigenvalues of GNEP.\n\nTogether, the quantities alpha = ALPHA(j) and beta = BETA(j)\nrepresent the j-th eigenvalue of the matrix pair (A,B), in\none of the forms lambda = alpha/beta or mu = beta/alpha.\nSince either lambda or mu may overflow, they should not,\nin general, be computed.'), ('VL', "VL is COMPLEX array, dimension (LDVL,N)\nIf JOBVL = 'V', the left eigenvectors u(j) are stored\nin the columns of VL, in the same order as their eigenvalues.\nEach eigenvector is scaled so that its largest component has\nabs(real part) + abs(imag. part) = 1, except for eigenvectors\ncorresponding to an eigenvalue with alpha = beta = 0, which\nare set to zero.\nNot referenced if JOBVL = 'N'."), ('LDVL', "LDVL is INTEGER\nThe leading dimension of the matrix VL. LDVL >= 1, and\nif JOBVL = 'V', LDVL >= N."), ('VR', "VR is COMPLEX array, dimension (LDVR,N)\nIf JOBVR = 'V', the right eigenvectors x(j) are stored\nin the columns of VR, in the same order as their eigenvalues.\nEach eigenvector is scaled so that its largest component has\nabs(real part) + abs(imag. part) = 1, except for eigenvectors\ncorresponding to an eigenvalue with alpha = beta = 0, which\nare set to zero.\nNot referenced if JOBVR = 'N'."), ('LDVR', "LDVR is INTEGER\nThe leading dimension of the matrix VR. LDVR >= 1, and\nif JOBVR = 'V', LDVR >= N."), ('WORK', 'WORK is COMPLEX array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', 'LWORK is INTEGER\nThe dimension of the array WORK.  LWORK >= max(1,2*N).\nFor good performance, LWORK must generally be larger.\nTo compute the optimal value of LWORK, call ILAENV to get\nblocksizes (for CGEQRF, CUNMQR, and CUNGQR.)  Then compute:\nNB  -- MAX of the blocksizes for CGEQRF, CUNMQR, and CUNGQR;\nThe optimal LWORK is  MAX( 2*N, N*(NB+1) ).\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal size of the WORK array, returns\nthis value as the first entry of the WORK array, and no error\nmessage related to LWORK is issued by XERBLA.'), ('RWORK', 'RWORK is REAL array, dimension (8*N)'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value.\n=1,...,N:\n      The QZ iteration failed.  No eigenvectors have been\n      calculated, but ALPHA(j) and BETA(j) should be\n      correct for j=INFO+1,...,N.\n> N:  errors that usually indicate LAPACK problems:\n      =N+1: error return from CGGBAL\n      =N+2: error return from CGEQRF\n      =N+3: error return from CUNMQR\n      =N+4: error return from CUNGQR\n      =N+5: error return from CGGHRD\n      =N+6: error return from CHGEQZ (other than failed\n                                     iteration)\n      =N+7: error return from CTGEVC\n      =N+8: error return from CGGBAK (computing VL)\n      =N+9: error return from CGGBAK (computing VR)\n      =N+10: error return from CLASCL (various calls)'))
