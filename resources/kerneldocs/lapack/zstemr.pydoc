(('zstemr', 'ZSTEMR computes selected eigenvalues and, optionally, eigenvectors\nof a real symmetric tridiagonal matrix T. Any such unreduced matrix has\na well defined set of pairwise different real eigenvalues, the corresponding\nreal eigenvectors are pairwise orthogonal.\n\nThe spectrum may be computed either completely or partially by specifying\neither an interval (VL,VU] or a range of indices IL:IU for the desired\neigenvalues.\n\nDepending on the number of desired eigenvalues, these are computed either\nby bisection or the dqds algorithm. Numerically orthogonal eigenvectors are\ncomputed by the use of various suitable L D L^T factorizations near clusters\nof close eigenvalues (referred to as RRRs, Relatively Robust\nRepresentations). An informal sketch of the algorithm follows.\n\nFor each unreduced block (submatrix) of T,\n   (a) Compute T - sigma I  = L D L^T, so that L and D\n       define all the wanted eigenvalues to high relative accuracy.\n       This means that small relative changes in the entries of D and L\n       cause only small relative changes in the eigenvalues and\n       eigenvectors. The standard (unfactored) representation of the\n       tridiagonal matrix T does not have this property in general.\n   (b) Compute the eigenvalues to suitable accuracy.\n       If the eigenvectors are desired, the algorithm attains full\n       accuracy of the computed eigenvalues only right before\n       the corresponding vectors have to be computed, see steps c) and d).\n   (c) For each cluster of close eigenvalues, select a new\n       shift close to the cluster, find a new factorization, and refine\n       the shifted eigenvalues to suitable accuracy.\n   (d) For each eigenvalue with a large enough relative separation compute\n       the corresponding eigenvector by forming a rank revealing twisted\n       factorization. Go back to (c) for any clusters that remain.\n\nFor more details, see:\n- Inderjit S. Dhillon and Beresford N. Parlett: "Multiple representations\n  to compute orthogonal eigenvectors of symmetric tridiagonal matrices,"\n  Linear Algebra and its Applications, 387(1), pp. 1-28, August 2004.\n- Inderjit Dhillon and Beresford Parlett: "Orthogonal Eigenvectors and\n  Relative Gaps," SIAM Journal on Matrix Analysis and Applications, Vol. 25,\n  2004.  Also LAPACK Working Note 154.\n- Inderjit Dhillon: "A new O(n^2) algorithm for the symmetric\n  tridiagonal eigenvalue/eigenvector problem",\n  Computer Science Division Technical Report No. UCB/CSD-97-971,\n  UC Berkeley, May 1997.\n\nFurther Details\n1.ZSTEMR works only on machines which follow IEEE-754\nfloating-point standard in their handling of infinities and NaNs.\nThis permits the use of efficient inner loops avoiding a check for\nzero divisors.\n\n2. LAPACK routines can be used to reduce a complex Hermitean matrix to\nreal symmetric tridiagonal form.\n\n(Any complex Hermitean tridiagonal matrix has real values on its diagonal\nand potentially complex numbers on its off-diagonals. By applying a\nsimilarity transform with an appropriate diagonal matrix\ndiag(1,e^{i \\phy_1}, ... , e^{i \\phy_{n-1}}), the complex Hermitean\nmatrix can be transformed into a real symmetric matrix and complex\narithmetic can be entirely avoided.)\n\nWhile the eigenvectors of the real symmetric tridiagonal matrix are real,\nthe eigenvectors of original complex Hermitean matrix have complex entries\nin general.\nSince LAPACK drivers overwrite the matrix data with the eigenvectors,\nZSTEMR accepts complex workspace to facilitate interoperability\nwith ZUNMTR or ZUPMTR.'), ('JOBZ', "JOBZ is CHARACTER*1\n= 'N':  Compute eigenvalues only;\n= 'V':  Compute eigenvalues and eigenvectors."), ('RANGE', "RANGE is CHARACTER*1\n= 'A': all eigenvalues will be found.\n= 'V': all eigenvalues in the half-open interval (VL,VU]\n       will be found.\n= 'I': the IL-th through IU-th eigenvalues will be found."), ('N', 'N is INTEGER\nThe order of the matrix.  N >= 0.'), ('D', 'D is DOUBLE PRECISION array, dimension (N)\nOn entry, the N diagonal elements of the tridiagonal matrix\nT. On exit, D is overwritten.'), ('E', 'E is DOUBLE PRECISION array, dimension (N)\nOn entry, the (N-1) subdiagonal elements of the tridiagonal\nmatrix T in elements 1 to N-1 of E. E(N) need not be set on\ninput, but is used internally as workspace.\nOn exit, E is overwritten.'), ('VL', 'VL is DOUBLE PRECISION'), ('VU', "VU is DOUBLE PRECISION\n\nIf RANGE='V', the lower and upper bounds of the interval to\nbe searched for eigenvalues. VL < VU.\nNot referenced if RANGE = 'A' or 'I'."), ('IL', 'IL is INTEGER'), ('IU', "IU is INTEGER\n\nIf RANGE='I', the indices (in ascending order) of the\nsmallest and largest eigenvalues to be returned.\n1 <= IL <= IU <= N, if N > 0.\nNot referenced if RANGE = 'A' or 'V'."), ('M', "M is INTEGER\nThe total number of eigenvalues found.  0 <= M <= N.\nIf RANGE = 'A', M = N, and if RANGE = 'I', M = IU-IL+1."), ('W', 'W is DOUBLE PRECISION array, dimension (N)\nThe first M elements contain the selected eigenvalues in\nascending order.'), ('Z', "Z is COMPLEX*16 array, dimension (LDZ, max(1,M) )\nIf JOBZ = 'V', and if INFO = 0, then the first M columns of Z\ncontain the orthonormal eigenvectors of the matrix T\ncorresponding to the selected eigenvalues, with the i-th\ncolumn of Z holding the eigenvector associated with W(i).\nIf JOBZ = 'N', then Z is not referenced.\nNote: the user must ensure that at least max(1,M) columns are\nsupplied in the array Z; if RANGE = 'V', the exact value of M\nis not known in advance and can be computed with a workspace\nquery by setting NZC = -1, see below."), ('LDZ', "LDZ is INTEGER\nThe leading dimension of the array Z.  LDZ >= 1, and if\nJOBZ = 'V', then LDZ >= max(1,N)."), ('NZC', "NZC is INTEGER\nThe number of eigenvectors to be held in the array Z.\nIf RANGE = 'A', then NZC >= max(1,N).\nIf RANGE = 'V', then NZC >= the number of eigenvalues in (VL,VU].\nIf RANGE = 'I', then NZC >= IU-IL+1.\nIf NZC = -1, then a workspace query is assumed; the\nroutine calculates the number of columns of the array Z that\nare needed to hold the eigenvectors.\nThis value is returned as the first entry of the Z array, and\nno error message related to NZC is issued by XERBLA."), ('ISUPPZ', "ISUPPZ is INTEGER ARRAY, dimension ( 2*max(1,M) )\nThe support of the eigenvectors in Z, i.e., the indices\nindicating the nonzero elements in Z. The i-th computed eigenvector\nis nonzero only in elements ISUPPZ( 2*i-1 ) through\nISUPPZ( 2*i ). This is relevant in the case when the matrix\nis split. ISUPPZ is only accessed when JOBZ is 'V' and N > 0."), ('TRYRAC', 'TRYRAC is LOGICAL\nIf TRYRAC.EQ..TRUE., indicates that the code should check whether\nthe tridiagonal matrix defines its eigenvalues to high relative\naccuracy.  If so, the code uses relative-accuracy preserving\nalgorithms that might be (a bit) slower depending on the matrix.\nIf the matrix does not define its eigenvalues to high relative\naccuracy, the code can uses possibly faster algorithms.\nIf TRYRAC.EQ..FALSE., the code is not required to guarantee\nrelatively accurate eigenvalues and can use the fastest possible\ntechniques.\nOn exit, a .TRUE. TRYRAC will be set to .FALSE. if the matrix\ndoes not define its eigenvalues to high relative accuracy.'), ('WORK', 'WORK is DOUBLE PRECISION array, dimension (LWORK)\nOn exit, if INFO = 0, WORK(1) returns the optimal\n(and minimal) LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK. LWORK >= max(1,18*N)\nif JOBZ = 'V', and LWORK >= max(1,12*N) if JOBZ = 'N'.\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal size of the WORK array, returns\nthis value as the first entry of the WORK array, and no error\nmessage related to LWORK is issued by XERBLA."), ('IWORK', 'IWORK is INTEGER array, dimension (LIWORK)\nOn exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.'), ('LIWORK', 'LIWORK is INTEGER\nThe dimension of the array IWORK.  LIWORK >= max(1,10*N)\nif the eigenvectors are desired, and LIWORK >= max(1,8*N)\nif only the eigenvalues are to be computed.\nIf LIWORK = -1, then a workspace query is assumed; the\nroutine only calculates the optimal size of the IWORK array,\nreturns this value as the first entry of the IWORK array, and\nno error message related to LIWORK is issued by XERBLA.'), ('INFO', 'INFO is INTEGER\nOn exit, INFO\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  if INFO = 1X, internal error in DLARRE,\n      if INFO = 2X, internal error in ZLARRV.\n      Here, the digit X = ABS( IINFO ) < 10, where IINFO is\n      the nonzero error code returned by DLARRE or\n      ZLARRV, respectively.'))
