(('sormtr', "SORMTR overwrites the general real M-by-N matrix C with\n\n                SIDE = 'L'     SIDE = 'R'\nTRANS = 'N':      Q * C          C * Q\nTRANS = 'T':      Q**T * C       C * Q**T\n\nwhere Q is a real orthogonal matrix of order nq, with nq = m if\nSIDE = 'L' and nq = n if SIDE = 'R'. Q is defined as the product of\nnq-1 elementary reflectors, as returned by SSYTRD:\n\nif UPLO = 'U', Q = H(nq-1) . . . H(2) H(1);\n\nif UPLO = 'L', Q = H(1) H(2) . . . H(nq-1)."), ('SIDE', "SIDE is CHARACTER*1\n= 'L': apply Q or Q**T from the Left;\n= 'R': apply Q or Q**T from the Right."), ('UPLO', "UPLO is CHARACTER*1\n= 'U': Upper triangle of A contains elementary reflectors\n       from SSYTRD;\n= 'L': Lower triangle of A contains elementary reflectors\n       from SSYTRD."), ('TRANS', "TRANS is CHARACTER*1\n= 'N':  No transpose, apply Q;\n= 'T':  Transpose, apply Q**T."), ('M', 'M is INTEGER\nThe number of rows of the matrix C. M >= 0.'), ('N', 'N is INTEGER\nThe number of columns of the matrix C. N >= 0.'), ('A', "A is REAL array, dimension\n                     (LDA,M) if SIDE = 'L'\n                     (LDA,N) if SIDE = 'R'\nThe vectors which define the elementary reflectors, as\nreturned by SSYTRD."), ('LDA', "LDA is INTEGER\nThe leading dimension of the array A.\nLDA >= max(1,M) if SIDE = 'L'; LDA >= max(1,N) if SIDE = 'R'."), ('TAU', "TAU is REAL array, dimension\n                     (M-1) if SIDE = 'L'\n                     (N-1) if SIDE = 'R'\nTAU(i) must contain the scalar factor of the elementary\nreflector H(i), as returned by SSYTRD."), ('C', 'C is REAL array, dimension (LDC,N)\nOn entry, the M-by-N matrix C.\nOn exit, C is overwritten by Q*C or Q**T*C or C*Q**T or C*Q.'), ('LDC', 'LDC is INTEGER\nThe leading dimension of the array C. LDC >= max(1,M).'), ('WORK', 'WORK is REAL array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK.\nIf SIDE = 'L', LWORK >= max(1,N);\nif SIDE = 'R', LWORK >= max(1,M).\nFor optimum performance LWORK >= N*NB if SIDE = 'L', and\nLWORK >= M*NB if SIDE = 'R', where NB is the optimal\nblocksize.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal size of the WORK array, returns\nthis value as the first entry of the WORK array, and no error\nmessage related to LWORK is issued by XERBLA."), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value'))
