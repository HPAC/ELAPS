(('dstevr', 'DSTEVR computes selected eigenvalues and, optionally, eigenvectors\nof a real symmetric tridiagonal matrix T.  Eigenvalues and\neigenvectors can be selected by specifying either a range of values\nor a range of indices for the desired eigenvalues.\n\nWhenever possible, DSTEVR calls DSTEMR to compute the\neigenspectrum using Relatively Robust Representations.  DSTEMR\ncomputes eigenvalues by the dqds algorithm, while orthogonal\neigenvectors are computed from various "good" L D L^T representations\n(also known as Relatively Robust Representations). Gram-Schmidt\northogonalization is avoided as far as possible. More specifically,\nthe various steps of the algorithm are as follows. For the i-th\nunreduced block of T,\n   (a) Compute T - sigma_i = L_i D_i L_i^T, such that L_i D_i L_i^T\n        is a relatively robust representation,\n   (b) Compute the eigenvalues, lambda_j, of L_i D_i L_i^T to high\n       relative accuracy by the dqds algorithm,\n   (c) If there is a cluster of close eigenvalues, "choose" sigma_i\n       close to the cluster, and go to step (a),\n   (d) Given the approximate eigenvalue lambda_j of L_i D_i L_i^T,\n       compute the corresponding eigenvector by forming a\n       rank-revealing twisted factorization.\nThe desired accuracy of the output can be specified by the input\nparameter ABSTOL.\n\nFor more details, see "A new O(n^2) algorithm for the symmetric\ntridiagonal eigenvalue/eigenvector problem", by Inderjit Dhillon,\nComputer Science Division Technical Report No. UCB//CSD-97-971,\nUC Berkeley, May 1997.\n\n\nNote 1 : DSTEVR calls DSTEMR when the full spectrum is requested\non machines which conform to the ieee-754 floating point standard.\nDSTEVR calls DSTEBZ and DSTEIN on non-ieee machines and\nwhen partial spectrum requests are made.\n\nNormal execution of DSTEMR may create NaNs and infinities and\nhence may abort due to a floating point exception in environments\nwhich do not handle NaNs and infinities in the ieee standard default\nmanner.'), ('JOBZ', "JOBZ is CHARACTER*1\n= 'N':  Compute eigenvalues only;\n= 'V':  Compute eigenvalues and eigenvectors."), ('RANGE', "RANGE is CHARACTER*1\n= 'A': all eigenvalues will be found.\n= 'V': all eigenvalues in the half-open interval (VL,VU]\n       will be found.\n= 'I': the IL-th through IU-th eigenvalues will be found.\nFor RANGE = 'V' or 'I' and IU - IL < N - 1, DSTEBZ and\nDSTEIN are called"), ('N', 'N is INTEGER\nThe order of the matrix.  N >= 0.'), ('D', 'D is DOUBLE PRECISION array, dimension (N)\nOn entry, the n diagonal elements of the tridiagonal matrix\nA.\nOn exit, D may be multiplied by a constant factor chosen\nto avoid over/underflow in computing the eigenvalues.'), ('E', 'E is DOUBLE PRECISION array, dimension (max(1,N-1))\nOn entry, the (n-1) subdiagonal elements of the tridiagonal\nmatrix A in elements 1 to N-1 of E.\nOn exit, E may be multiplied by a constant factor chosen\nto avoid over/underflow in computing the eigenvalues.'), ('VL', 'VL is DOUBLE PRECISION'), ('VU', "VU is DOUBLE PRECISION\nIf RANGE='V', the lower and upper bounds of the interval to\nbe searched for eigenvalues. VL < VU.\nNot referenced if RANGE = 'A' or 'I'."), ('IL', 'IL is INTEGER'), ('IU', "IU is INTEGER\nIf RANGE='I', the indices (in ascending order) of the\nsmallest and largest eigenvalues to be returned.\n1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\nNot referenced if RANGE = 'A' or 'V'."), ('ABSTOL', 'ABSTOL is DOUBLE PRECISION\nThe absolute error tolerance for the eigenvalues.\nAn approximate eigenvalue is accepted as converged\nwhen it is determined to lie in an interval [a,b]\nof width less than or equal to\n\n        ABSTOL + EPS *   max( |a|,|b| ) ,\n\nwhere EPS is the machine precision.  If ABSTOL is less than\nor equal to zero, then  EPS*|T|  will be used in its place,\nwhere |T| is the 1-norm of the tridiagonal matrix obtained\nby reducing A to tridiagonal form.\n\nSee "Computing Small Singular Values of Bidiagonal Matrices\nwith Guaranteed High Relative Accuracy," by Demmel and\nKahan, LAPACK Working Note #3.\n\nIf high relative accuracy is important, set ABSTOL to\nDLAMCH( \'Safe minimum\' ).  Doing so will guarantee that\neigenvalues are computed to high relative accuracy when\npossible in future releases.  The current code does not\nmake any guarantees about high relative accuracy, but\nfuture releases will. See J. Barlow and J. Demmel,\n"Computing Accurate Eigensystems of Scaled Diagonally\nDominant Matrices", LAPACK Working Note #7, for a discussion\nof which matrices define their eigenvalues to high relative\naccuracy.'), ('M', "M is INTEGER\nThe total number of eigenvalues found.  0 <= M <= N.\nIf RANGE = 'A', M = N, and if RANGE = 'I', M = IU-IL+1."), ('W', 'W is DOUBLE PRECISION array, dimension (N)\nThe first M elements contain the selected eigenvalues in\nascending order.'), ('Z', "Z is DOUBLE PRECISION array, dimension (LDZ, max(1,M) )\nIf JOBZ = 'V', then if INFO = 0, the first M columns of Z\ncontain the orthonormal eigenvectors of the matrix A\ncorresponding to the selected eigenvalues, with the i-th\ncolumn of Z holding the eigenvector associated with W(i).\nNote: the user must ensure that at least max(1,M) columns are\nsupplied in the array Z; if RANGE = 'V', the exact value of M\nis not known in advance and an upper bound must be used."), ('LDZ', "LDZ is INTEGER\nThe leading dimension of the array Z.  LDZ >= 1, and if\nJOBZ = 'V', LDZ >= max(1,N)."), ('ISUPPZ', "ISUPPZ is INTEGER array, dimension ( 2*max(1,M) )\nThe support of the eigenvectors in Z, i.e., the indices\nindicating the nonzero elements in Z. The i-th eigenvector\nis nonzero only in elements ISUPPZ( 2*i-1 ) through\nISUPPZ( 2*i ).\nImplemented only for RANGE = 'A' or 'I' and IU - IL = N - 1"), ('WORK', 'WORK is DOUBLE PRECISION array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal (and\nminimal) LWORK.'), ('LWORK', 'LWORK is INTEGER\nThe dimension of the array WORK.  LWORK >= max(1,20*N).\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal sizes of the WORK and IWORK\narrays, returns these values as the first entries of the WORK\nand IWORK arrays, and no error message related to LWORK or\nLIWORK is issued by XERBLA.'), ('IWORK', 'IWORK is INTEGER array, dimension (MAX(1,LIWORK))\nOn exit, if INFO = 0, IWORK(1) returns the optimal (and\nminimal) LIWORK.'), ('LIWORK', 'LIWORK is INTEGER\nThe dimension of the array IWORK.  LIWORK >= max(1,10*N).\n\nIf LIWORK = -1, then a workspace query is assumed; the\nroutine only calculates the optimal sizes of the WORK and\nIWORK arrays, returns these values as the first entries of\nthe WORK and IWORK arrays, and no error message related to\nLWORK or LIWORK is issued by XERBLA.'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  Internal error'))
