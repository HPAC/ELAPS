(('zsyr2k', 'ZSYR2K  performs one of the symmetric rank 2k operations\n\n   C := alpha*A*B**T + alpha*B*A**T + beta*C,\n\nor\n\n   C := alpha*A**T*B + alpha*B**T*A + beta*C,\n\nwhere  alpha and beta  are scalars,  C is an  n by n symmetric matrix\nand  A and B  are  n by k  matrices  in the  first  case  and  k by n\nmatrices in the second case.'), ('UPLO', "UPLO is CHARACTER*1\n On  entry,   UPLO  specifies  whether  the  upper  or  lower\n triangular  part  of the  array  C  is to be  referenced  as\n follows:\n\n    UPLO = 'U' or 'u'   Only the  upper triangular part of  C\n                        is to be referenced.\n\n    UPLO = 'L' or 'l'   Only the  lower triangular part of  C\n                        is to be referenced."), ('TRANS', "TRANS is CHARACTER*1\n On entry,  TRANS  specifies the operation to be performed as\n follows:\n\n    TRANS = 'N' or 'n'    C := alpha*A*B**T + alpha*B*A**T +\n                               beta*C.\n\n    TRANS = 'T' or 't'    C := alpha*A**T*B + alpha*B**T*A +\n                               beta*C."), ('N', 'N is INTEGER\n On entry,  N specifies the order of the matrix C.  N must be\n at least zero.'), ('K', "K is INTEGER\n On entry with  TRANS = 'N' or 'n',  K  specifies  the number\n of  columns  of the  matrices  A and B,  and on  entry  with\n TRANS = 'T' or 't',  K  specifies  the number of rows of the\n matrices  A and B.  K must be at least zero."), ('ALPHA', 'ALPHA is COMPLEX*16\n On entry, ALPHA specifies the scalar alpha.'), ('A', "A is COMPLEX*16 array of DIMENSION ( LDA, ka ), where ka is\n k  when  TRANS = 'N' or 'n',  and is  n  otherwise.\n Before entry with  TRANS = 'N' or 'n',  the  leading  n by k\n part of the array  A  must contain the matrix  A,  otherwise\n the leading  k by n  part of the array  A  must contain  the\n matrix A."), ('LDA', "LDA is INTEGER\n On entry, LDA specifies the first dimension of A as declared\n in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'\n then  LDA must be at least  max( 1, n ), otherwise  LDA must\n be at least  max( 1, k )."), ('B', "B is COMPLEX*16 array of DIMENSION ( LDB, kb ), where kb is\n k  when  TRANS = 'N' or 'n',  and is  n  otherwise.\n Before entry with  TRANS = 'N' or 'n',  the  leading  n by k\n part of the array  B  must contain the matrix  B,  otherwise\n the leading  k by n  part of the array  B  must contain  the\n matrix B."), ('LDB', "LDB is INTEGER\n On entry, LDB specifies the first dimension of B as declared\n in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'\n then  LDB must be at least  max( 1, n ), otherwise  LDB must\n be at least  max( 1, k )."), ('BETA', 'BETA is COMPLEX*16\n On entry, BETA specifies the scalar beta.'), ('C', "C is COMPLEX*16 array of DIMENSION ( LDC, n ).\n Before entry  with  UPLO = 'U' or 'u',  the leading  n by n\n upper triangular part of the array C must contain the upper\n triangular part  of the  symmetric matrix  and the strictly\n lower triangular part of C is not referenced.  On exit, the\n upper triangular part of the array  C is overwritten by the\n upper triangular part of the updated matrix.\n Before entry  with  UPLO = 'L' or 'l',  the leading  n by n\n lower triangular part of the array C must contain the lower\n triangular part  of the  symmetric matrix  and the strictly\n upper triangular part of C is not referenced.  On exit, the\n lower triangular part of the array  C is overwritten by the\n lower triangular part of the updated matrix."), ('LDC', 'LDC is INTEGER\n On entry, LDC specifies the first dimension of C as declared\n in  the  calling  (sub)  program.   LDC  must  be  at  least\n max( 1, n ).'))
