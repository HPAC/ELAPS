(('cgetri', 'CGETRI computes the inverse of a matrix using the LU factorization\ncomputed by CGETRF.\n\nThis method inverts U and then computes inv(A) by solving the system\ninv(A)*L = inv(U) for inv(A).'), ('N', 'N is INTEGER\nThe order of the matrix A.  N >= 0.'), ('A', 'A is COMPLEX array, dimension (LDA,N)\nOn entry, the factors L and U from the factorization\nA = P*L*U as computed by CGETRF.\nOn exit, if INFO = 0, the inverse of the original matrix A.'), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,N).'), ('IPIV', 'IPIV is INTEGER array, dimension (N)\nThe pivot indices from CGETRF; for 1<=i<=N, row i of the\nmatrix was interchanged with row IPIV(i).'), ('WORK', 'WORK is COMPLEX array, dimension (MAX(1,LWORK))\nOn exit, if INFO=0, then WORK(1) returns the optimal LWORK.'), ('LWORK', 'LWORK is INTEGER\nThe dimension of the array WORK.  LWORK >= max(1,N).\nFor optimal performance LWORK >= N*NB, where NB is\nthe optimal blocksize returned by ILAENV.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal size of the WORK array, returns\nthis value as the first entry of the WORK array, and no error\nmessage related to LWORK is issued by XERBLA.'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  if INFO = i, U(i,i) is exactly zero; the matrix is\n      singular and its inverse could not be computed.'))
