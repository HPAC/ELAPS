(('slaeda', 'SLAEDA computes the Z vector corresponding to the merge step in the\nCURLVLth step of the merge process with TLVLS steps for the CURPBMth\nproblem.'), ('N', 'N is INTEGER\nhe dimension of the symmetric tridiagonal matrix.  N >= 0.'), ('TLVLS', 'TLVLS is INTEGER\nhe total number of merging levels in the overall divide and\nonquer tree.'), ('CURLVL', 'CURLVL is INTEGER\nhe current level in the overall merge routine,\n <= curlvl <= tlvls.'), ('CURPBM', 'CURPBM is INTEGER\nhe current problem in the current level in the overall\nerge routine (counting from upper left to lower right).'), ('PRMPTR', "PRMPTR is INTEGER array, dimension (N lg N)\nontains a list of pointers which indicate where in PERM a\nevel's permutation is stored.  PRMPTR(i+1) - PRMPTR(i)\nndicates the size of the permutation and incidentally the\nize of the full, non-deflated problem."), ('PERM', 'PERM is INTEGER array, dimension (N lg N)\nontains the permutations (from deflation and sorting) to be\npplied to each eigenblock.'), ('GIVPTR', "GIVPTR is INTEGER array, dimension (N lg N)\nontains a list of pointers which indicate where in GIVCOL a\nevel's Givens rotations are stored.  GIVPTR(i+1) - GIVPTR(i)\nndicates the number of Givens rotations."), ('GIVCOL', 'GIVCOL is INTEGER array, dimension (2, N lg N)\nach pair of numbers indicates a pair of columns to take place\nn a Givens rotation.'), ('GIVNUM', 'GIVNUM is REAL array, dimension (2, N lg N)\nach number indicates the S value to be used in the\norresponding Givens rotation.'), ('Q', 'Q is REAL array, dimension (N**2)\nontains the square eigenblocks from previous levels, the\ntarting positions for blocks are given by QPTR.'), ('QPTR', 'QPTR is INTEGER array, dimension (N+2)\nontains a list of pointers which indicate where in Q an\nigenblock is stored.  SQRT( QPTR(i+1) - QPTR(i) ) indicates\nhe size of the block.'), ('Z', 'Z is REAL array, dimension (N)\nn output this vector contains the updating vector (the last\now of the first sub-eigenvector matrix and the first row of\nhe second sub-eigenvector matrix).'), ('ZTEMP', 'ZTEMP is REAL array, dimension (N)'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.'))
