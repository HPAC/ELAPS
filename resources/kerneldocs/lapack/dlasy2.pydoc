(('dlasy2', 'DLASY2 solves for the N1 by N2 matrix X, 1 <= N1,N2 <= 2, in\n\n       op(TL)*X + ISGN*X*op(TR) = SCALE*B,\n\nwhere TL is N1 by N1, TR is N2 by N2, B is N1 by N2, and ISGN = 1 or\n-1.  op(T) = T or T**T, where T**T denotes the transpose of T.'), ('LTRANL', 'LTRANL is LOGICAL\nOn entry, LTRANL specifies the op(TL):\n   = .FALSE., op(TL) = TL,\n   = .TRUE., op(TL) = TL**T.'), ('LTRANR', 'LTRANR is LOGICAL\nOn entry, LTRANR specifies the op(TR):\n  = .FALSE., op(TR) = TR,\n  = .TRUE., op(TR) = TR**T.'), ('ISGN', 'ISGN is INTEGER\nOn entry, ISGN specifies the sign of the equation\nas described before. ISGN may only be 1 or -1.'), ('N1', 'N1 is INTEGER\nOn entry, N1 specifies the order of matrix TL.\nN1 may only be 0, 1 or 2.'), ('N2', 'N2 is INTEGER\nOn entry, N2 specifies the order of matrix TR.\nN2 may only be 0, 1 or 2.'), ('TL', 'TL is DOUBLE PRECISION array, dimension (LDTL,2)\nOn entry, TL contains an N1 by N1 matrix.'), ('LDTL', 'LDTL is INTEGER\nThe leading dimension of the matrix TL. LDTL >= max(1,N1).'), ('TR', 'TR is DOUBLE PRECISION array, dimension (LDTR,2)\nOn entry, TR contains an N2 by N2 matrix.'), ('LDTR', 'LDTR is INTEGER\nThe leading dimension of the matrix TR. LDTR >= max(1,N2).'), ('B', 'B is DOUBLE PRECISION array, dimension (LDB,2)\nOn entry, the N1 by N2 matrix B contains the right-hand\nside of the equation.'), ('LDB', 'LDB is INTEGER\nThe leading dimension of the matrix B. LDB >= max(1,N1).'), ('SCALE', 'SCALE is DOUBLE PRECISION\nOn exit, SCALE contains the scale factor. SCALE is chosen\nless than or equal to 1 to prevent the solution overflowing.'), ('X', 'X is DOUBLE PRECISION array, dimension (LDX,2)\nOn exit, X contains the N1 by N2 solution.'), ('LDX', 'LDX is INTEGER\nThe leading dimension of the matrix X. LDX >= max(1,N1).'), ('XNORM', 'XNORM is DOUBLE PRECISION\nOn exit, XNORM is the infinity-norm of the solution.'), ('INFO', 'INFO is INTEGER\nOn exit, INFO is set to\n   0: successful exit.\n   1: TL and TR have too close eigenvalues, so TL or\n      TR is perturbed to get a nonsingular equation.\nNOTE: In the interests of speed, this routine does not\n      check the inputs for errors.'))
