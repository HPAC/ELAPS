(('ztrsv', 'ZTRSV  solves one of the systems of equations\n\n   A*x = b,   or   A**T*x = b,   or   A**H*x = b,\n\nwhere b and x are n element vectors and A is an n by n unit, or\nnon-unit, upper or lower triangular matrix.\n\nNo test for singularity or near-singularity is included in this\nroutine. Such tests must be performed before calling this routine.'), ('UPLO', "UPLO is CHARACTER*1\n On entry, UPLO specifies whether the matrix is an upper or\n lower triangular matrix as follows:\n\n    UPLO = 'U' or 'u'   A is an upper triangular matrix.\n\n    UPLO = 'L' or 'l'   A is a lower triangular matrix."), ('TRANS', "TRANS is CHARACTER*1\n On entry, TRANS specifies the equations to be solved as\n follows:\n\n    TRANS = 'N' or 'n'   A*x = b.\n\n    TRANS = 'T' or 't'   A**T*x = b.\n\n    TRANS = 'C' or 'c'   A**H*x = b."), ('DIAG', "DIAG is CHARACTER*1\n On entry, DIAG specifies whether or not A is unit\n triangular as follows:\n\n    DIAG = 'U' or 'u'   A is assumed to be unit triangular.\n\n    DIAG = 'N' or 'n'   A is not assumed to be unit\n                        triangular."), ('N', 'N is INTEGER\n On entry, N specifies the order of the matrix A.\n N must be at least zero.'), ('A', "A is COMPLEX*16 array of DIMENSION ( LDA, n ).\n Before entry with  UPLO = 'U' or 'u', the leading n by n\n upper triangular part of the array A must contain the upper\n triangular matrix and the strictly lower triangular part of\n A is not referenced.\n Before entry with UPLO = 'L' or 'l', the leading n by n\n lower triangular part of the array A must contain the lower\n triangular matrix and the strictly upper triangular part of\n A is not referenced.\n Note that when  DIAG = 'U' or 'u', the diagonal elements of\n A are not referenced either, but are assumed to be unity."), ('LDA', 'LDA is INTEGER\n On entry, LDA specifies the first dimension of A as declared\n in the calling (sub) program. LDA must be at least\n max( 1, n ).'), ('X', 'X is COMPLEX*16 array of dimension at least\n ( 1 + ( n - 1 )*abs( INCX ) ).\n Before entry, the incremented array X must contain the n\n element right-hand side vector b. On exit, X is overwritten\n with the solution vector x.'), ('INCX', 'INCX is INTEGER\n On entry, INCX specifies the increment for the elements of\n X. INCX must not be zero.'))
