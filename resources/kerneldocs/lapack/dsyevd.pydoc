(('dsyevd', 'DSYEVD computes all eigenvalues and, optionally, eigenvectors of a\nreal symmetric matrix A. If eigenvectors are desired, it uses a\ndivide and conquer algorithm.\n\nThe divide and conquer algorithm makes very mild assumptions about\nfloating point arithmetic. It will work on machines with a guard\ndigit in add/subtract, or on those binary machines without guard\ndigits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\nCray-2. It could conceivably fail on hexadecimal or decimal machines\nwithout guard digits, but we know of none.\n\nBecause of large use of BLAS of level 3, DSYEVD needs N**2 more\nworkspace than DSYEVX.'), ('JOBZ', "JOBZ is CHARACTER*1\n= 'N':  Compute eigenvalues only;\n= 'V':  Compute eigenvalues and eigenvectors."), ('UPLO', "UPLO is CHARACTER*1\n= 'U':  Upper triangle of A is stored;\n= 'L':  Lower triangle of A is stored."), ('N', 'N is INTEGER\nThe order of the matrix A.  N >= 0.'), ('A', "A is DOUBLE PRECISION array, dimension (LDA, N)\nOn entry, the symmetric matrix A.  If UPLO = 'U', the\nleading N-by-N upper triangular part of A contains the\nupper triangular part of the matrix A.  If UPLO = 'L',\nthe leading N-by-N lower triangular part of A contains\nthe lower triangular part of the matrix A.\nOn exit, if JOBZ = 'V', then if INFO = 0, A contains the\northonormal eigenvectors of the matrix A.\nIf JOBZ = 'N', then on exit the lower triangle (if UPLO='L')\nor the upper triangle (if UPLO='U') of A, including the\ndiagonal, is destroyed."), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,N).'), ('W', 'W is DOUBLE PRECISION array, dimension (N)\nIf INFO = 0, the eigenvalues in ascending order.'), ('WORK', 'WORK is DOUBLE PRECISION array,\n                               dimension (LWORK)\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK.\nIf N <= 1,               LWORK must be at least 1.\nIf JOBZ = 'N' and N > 1, LWORK must be at least 2*N+1.\nIf JOBZ = 'V' and N > 1, LWORK must be at least\n                                      1 + 6*N + 2*N**2.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal sizes of the WORK and IWORK\narrays, returns these values as the first entries of the WORK\nand IWORK arrays, and no error message related to LWORK or\nLIWORK is issued by XERBLA."), ('IWORK', 'IWORK is INTEGER array, dimension (MAX(1,LIWORK))\nOn exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.'), ('LIWORK', "LIWORK is INTEGER\nThe dimension of the array IWORK.\nIf N <= 1,                LIWORK must be at least 1.\nIf JOBZ  = 'N' and N > 1, LIWORK must be at least 1.\nIf JOBZ  = 'V' and N > 1, LIWORK must be at least 3 + 5*N.\n\nIf LIWORK = -1, then a workspace query is assumed; the\nroutine only calculates the optimal sizes of the WORK and\nIWORK arrays, returns these values as the first entries of\nthe WORK and IWORK arrays, and no error message related to\nLWORK or LIWORK is issued by XERBLA."), ('INFO', "INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  if INFO = i and JOBZ = 'N', then the algorithm failed\n      to converge; i off-diagonal elements of an intermediate\n      tridiagonal form did not converge to zero;\n      if INFO = i and JOBZ = 'V', then the algorithm failed\n      to compute an eigenvalue while working on the submatrix\n      lying in rows and columns INFO/(N+1) through\n      mod(INFO,N+1)."))
