(('ssyevr', 'SSYEVR computes selected eigenvalues and, optionally, eigenvectors\nof a real symmetric matrix A.  Eigenvalues and eigenvectors can be\nselected by specifying either a range of values or a range of\nindices for the desired eigenvalues.\n\nSSYEVR first reduces the matrix A to tridiagonal form T with a call\nto SSYTRD.  Then, whenever possible, SSYEVR calls SSTEMR to compute\nthe eigenspectrum using Relatively Robust Representations.  SSTEMR\ncomputes eigenvalues by the dqds algorithm, while orthogonal\neigenvectors are computed from various "good" L D L^T representations\n(also known as Relatively Robust Representations). Gram-Schmidt\northogonalization is avoided as far as possible. More specifically,\nthe various steps of the algorithm are as follows.\n\nFor each unreduced block (submatrix) of T,\n   (a) Compute T - sigma I  = L D L^T, so that L and D\n       define all the wanted eigenvalues to high relative accuracy.\n       This means that small relative changes in the entries of D and L\n       cause only small relative changes in the eigenvalues and\n       eigenvectors. The standard (unfactored) representation of the\n       tridiagonal matrix T does not have this property in general.\n   (b) Compute the eigenvalues to suitable accuracy.\n       If the eigenvectors are desired, the algorithm attains full\n       accuracy of the computed eigenvalues only right before\n       the corresponding vectors have to be computed, see steps c) and d).\n   (c) For each cluster of close eigenvalues, select a new\n       shift close to the cluster, find a new factorization, and refine\n       the shifted eigenvalues to suitable accuracy.\n   (d) For each eigenvalue with a large enough relative separation compute\n       the corresponding eigenvector by forming a rank revealing twisted\n       factorization. Go back to (c) for any clusters that remain.\n\nThe desired accuracy of the output can be specified by the input\nparameter ABSTOL.\n\nFor more details, see SSTEMR\'s documentation and:\n- Inderjit S. Dhillon and Beresford N. Parlett: "Multiple representations\n  to compute orthogonal eigenvectors of symmetric tridiagonal matrices,"\n  Linear Algebra and its Applications, 387(1), pp. 1-28, August 2004.\n- Inderjit Dhillon and Beresford Parlett: "Orthogonal Eigenvectors and\n  Relative Gaps," SIAM Journal on Matrix Analysis and Applications, Vol. 25,\n  2004.  Also LAPACK Working Note 154.\n- Inderjit Dhillon: "A new O(n^2) algorithm for the symmetric\n  tridiagonal eigenvalue/eigenvector problem",\n  Computer Science Division Technical Report No. UCB/CSD-97-971,\n  UC Berkeley, May 1997.\n\n\nNote 1 : SSYEVR calls SSTEMR when the full spectrum is requested\non machines which conform to the ieee-754 floating point standard.\nSSYEVR calls SSTEBZ and SSTEIN on non-ieee machines and\nwhen partial spectrum requests are made.\n\nNormal execution of SSTEMR may create NaNs and infinities and\nhence may abort due to a floating point exception in environments\nwhich do not handle NaNs and infinities in the ieee standard default\nmanner.'), ('JOBZ', "JOBZ is CHARACTER*1\n= 'N':  Compute eigenvalues only;\n= 'V':  Compute eigenvalues and eigenvectors."), ('RANGE', "RANGE is CHARACTER*1\n= 'A': all eigenvalues will be found.\n= 'V': all eigenvalues in the half-open interval (VL,VU]\n       will be found.\n= 'I': the IL-th through IU-th eigenvalues will be found.\nFor RANGE = 'V' or 'I' and IU - IL < N - 1, SSTEBZ and\nSSTEIN are called"), ('UPLO', "UPLO is CHARACTER*1\n= 'U':  Upper triangle of A is stored;\n= 'L':  Lower triangle of A is stored."), ('N', 'N is INTEGER\nThe order of the matrix A.  N >= 0.'), ('A', "A is REAL array, dimension (LDA, N)\nOn entry, the symmetric matrix A.  If UPLO = 'U', the\nleading N-by-N upper triangular part of A contains the\nupper triangular part of the matrix A.  If UPLO = 'L',\nthe leading N-by-N lower triangular part of A contains\nthe lower triangular part of the matrix A.\nOn exit, the lower triangle (if UPLO='L') or the upper\ntriangle (if UPLO='U') of A, including the diagonal, is\ndestroyed."), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,N).'), ('VL', 'VL is REAL'), ('VU', "VU is REAL\nIf RANGE='V', the lower and upper bounds of the interval to\nbe searched for eigenvalues. VL < VU.\nNot referenced if RANGE = 'A' or 'I'."), ('IL', 'IL is INTEGER'), ('IU', "IU is INTEGER\nIf RANGE='I', the indices (in ascending order) of the\nsmallest and largest eigenvalues to be returned.\n1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\nNot referenced if RANGE = 'A' or 'V'."), ('ABSTOL', 'ABSTOL is REAL\nThe absolute error tolerance for the eigenvalues.\nAn approximate eigenvalue is accepted as converged\nwhen it is determined to lie in an interval [a,b]\nof width less than or equal to\n\n        ABSTOL + EPS *   max( |a|,|b| ) ,\n\nwhere EPS is the machine precision.  If ABSTOL is less than\nor equal to zero, then  EPS*|T|  will be used in its place,\nwhere |T| is the 1-norm of the tridiagonal matrix obtained\nby reducing A to tridiagonal form.\n\nSee "Computing Small Singular Values of Bidiagonal Matrices\nwith Guaranteed High Relative Accuracy," by Demmel and\nKahan, LAPACK Working Note #3.\n\nIf high relative accuracy is important, set ABSTOL to\nSLAMCH( \'Safe minimum\' ).  Doing so will guarantee that\neigenvalues are computed to high relative accuracy when\npossible in future releases.  The current code does not\nmake any guarantees about high relative accuracy, but\nfuture releases will. See J. Barlow and J. Demmel,\n"Computing Accurate Eigensystems of Scaled Diagonally\nDominant Matrices", LAPACK Working Note #7, for a discussion\nof which matrices define their eigenvalues to high relative\naccuracy.'), ('M', "M is INTEGER\nThe total number of eigenvalues found.  0 <= M <= N.\nIf RANGE = 'A', M = N, and if RANGE = 'I', M = IU-IL+1."), ('W', 'W is REAL array, dimension (N)\nThe first M elements contain the selected eigenvalues in\nascending order.'), ('Z', "Z is REAL array, dimension (LDZ, max(1,M))\nIf JOBZ = 'V', then if INFO = 0, the first M columns of Z\ncontain the orthonormal eigenvectors of the matrix A\ncorresponding to the selected eigenvalues, with the i-th\ncolumn of Z holding the eigenvector associated with W(i).\nIf JOBZ = 'N', then Z is not referenced.\nNote: the user must ensure that at least max(1,M) columns are\nsupplied in the array Z; if RANGE = 'V', the exact value of M\nis not known in advance and an upper bound must be used.\nSupplying N columns is always safe."), ('LDZ', "LDZ is INTEGER\nThe leading dimension of the array Z.  LDZ >= 1, and if\nJOBZ = 'V', LDZ >= max(1,N)."), ('ISUPPZ', "ISUPPZ is INTEGER array, dimension ( 2*max(1,M) )\nThe support of the eigenvectors in Z, i.e., the indices\nindicating the nonzero elements in Z. The i-th eigenvector\nis nonzero only in elements ISUPPZ( 2*i-1 ) through\nISUPPZ( 2*i ).\nImplemented only for RANGE = 'A' or 'I' and IU - IL = N - 1"), ('WORK', 'WORK is REAL array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', 'LWORK is INTEGER\nThe dimension of the array WORK.  LWORK >= max(1,26*N).\nFor optimal efficiency, LWORK >= (NB+6)*N,\nwhere NB is the max of the blocksize for SSYTRD and SORMTR\nreturned by ILAENV.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal sizes of the WORK and IWORK\narrays, returns these values as the first entries of the WORK\nand IWORK arrays, and no error message related to LWORK or\nLIWORK is issued by XERBLA.'), ('IWORK', 'IWORK is INTEGER array, dimension (MAX(1,LIWORK))\nOn exit, if INFO = 0, IWORK(1) returns the optimal LWORK.'), ('LIWORK', 'LIWORK is INTEGER\nThe dimension of the array IWORK.  LIWORK >= max(1,10*N).\n\nIf LIWORK = -1, then a workspace query is assumed; the\nroutine only calculates the optimal sizes of the WORK and\nIWORK arrays, returns these values as the first entries of\nthe WORK and IWORK arrays, and no error message related to\nLWORK or LIWORK is issued by XERBLA.'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  Internal error'))
