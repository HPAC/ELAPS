(('dsygvd', 'DSYGVD computes all the eigenvalues, and optionally, the eigenvectors\nof a real generalized symmetric-definite eigenproblem, of the form\nA*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\nB are assumed to be symmetric and B is also positive definite.\nIf eigenvectors are desired, it uses a divide and conquer algorithm.\n\nThe divide and conquer algorithm makes very mild assumptions about\nfloating point arithmetic. It will work on machines with a guard\ndigit in add/subtract, or on those binary machines without guard\ndigits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\nCray-2. It could conceivably fail on hexadecimal or decimal machines\nwithout guard digits, but we know of none.'), ('ITYPE', 'ITYPE is INTEGER\nSpecifies the problem type to be solved:\n= 1:  A*x = (lambda)*B*x\n= 2:  A*B*x = (lambda)*x\n= 3:  B*A*x = (lambda)*x'), ('JOBZ', "JOBZ is CHARACTER*1\n= 'N':  Compute eigenvalues only;\n= 'V':  Compute eigenvalues and eigenvectors."), ('UPLO', "UPLO is CHARACTER*1\n= 'U':  Upper triangles of A and B are stored;\n= 'L':  Lower triangles of A and B are stored."), ('N', 'N is INTEGER\nThe order of the matrices A and B.  N >= 0.'), ('A', "A is DOUBLE PRECISION array, dimension (LDA, N)\nOn entry, the symmetric matrix A.  If UPLO = 'U', the\nleading N-by-N upper triangular part of A contains the\nupper triangular part of the matrix A.  If UPLO = 'L',\nthe leading N-by-N lower triangular part of A contains\nthe lower triangular part of the matrix A.\n\nOn exit, if JOBZ = 'V', then if INFO = 0, A contains the\nmatrix Z of eigenvectors.  The eigenvectors are normalized\nas follows:\nif ITYPE = 1 or 2, Z**T*B*Z = I;\nif ITYPE = 3, Z**T*inv(B)*Z = I.\nIf JOBZ = 'N', then on exit the upper triangle (if UPLO='U')\nor the lower triangle (if UPLO='L') of A, including the\ndiagonal, is destroyed."), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,N).'), ('B', "B is DOUBLE PRECISION array, dimension (LDB, N)\nOn entry, the symmetric matrix B.  If UPLO = 'U', the\nleading N-by-N upper triangular part of B contains the\nupper triangular part of the matrix B.  If UPLO = 'L',\nthe leading N-by-N lower triangular part of B contains\nthe lower triangular part of the matrix B.\n\nOn exit, if INFO <= N, the part of B containing the matrix is\noverwritten by the triangular factor U or L from the Cholesky\nfactorization B = U**T*U or B = L*L**T."), ('LDB', 'LDB is INTEGER\nThe leading dimension of the array B.  LDB >= max(1,N).'), ('W', 'W is DOUBLE PRECISION array, dimension (N)\nIf INFO = 0, the eigenvalues in ascending order.'), ('WORK', 'WORK is DOUBLE PRECISION array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK.\nIf N <= 1,               LWORK >= 1.\nIf JOBZ = 'N' and N > 1, LWORK >= 2*N+1.\nIf JOBZ = 'V' and N > 1, LWORK >= 1 + 6*N + 2*N**2.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal sizes of the WORK and IWORK\narrays, returns these values as the first entries of the WORK\nand IWORK arrays, and no error message related to LWORK or\nLIWORK is issued by XERBLA."), ('IWORK', 'IWORK is INTEGER array, dimension (MAX(1,LIWORK))\nOn exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.'), ('LIWORK', "LIWORK is INTEGER\nThe dimension of the array IWORK.\nIf N <= 1,                LIWORK >= 1.\nIf JOBZ  = 'N' and N > 1, LIWORK >= 1.\nIf JOBZ  = 'V' and N > 1, LIWORK >= 3 + 5*N.\n\nIf LIWORK = -1, then a workspace query is assumed; the\nroutine only calculates the optimal sizes of the WORK and\nIWORK arrays, returns these values as the first entries of\nthe WORK and IWORK arrays, and no error message related to\nLWORK or LIWORK is issued by XERBLA."), ('INFO', "INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  DPOTRF or DSYEVD returned an error code:\n   <= N:  if INFO = i and JOBZ = 'N', then the algorithm\n          failed to converge; i off-diagonal elements of an\n          intermediate tridiagonal form did not converge to\n          zero;\n          if INFO = i and JOBZ = 'V', then the algorithm\n          failed to compute an eigenvalue while working on\n          the submatrix lying in rows and columns INFO/(N+1)\n          through mod(INFO,N+1);\n   > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n          minor of order i of B is not positive definite.\n          The factorization of B could not be completed and\n          no eigenvalues or eigenvectors were computed."))
