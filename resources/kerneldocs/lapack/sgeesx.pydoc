(('sgeesx', "SGEESX computes for an N-by-N real nonsymmetric matrix A, the\neigenvalues, the real Schur form T, and, optionally, the matrix of\nSchur vectors Z.  This gives the Schur factorization A = Z*T*(Z**T).\n\nOptionally, it also orders the eigenvalues on the diagonal of the\nreal Schur form so that selected eigenvalues are at the top left;\ncomputes a reciprocal condition number for the average of the\nselected eigenvalues (RCONDE); and computes a reciprocal condition\nnumber for the right invariant subspace corresponding to the\nselected eigenvalues (RCONDV).  The leading columns of Z form an\northonormal basis for this invariant subspace.\n\nFor further explanation of the reciprocal condition numbers RCONDE\nand RCONDV, see Section 4.10 of the LAPACK Users' Guide (where\nthese quantities are called s and sep respectively).\n\nA real matrix is in real Schur form if it is upper quasi-triangular\nwith 1-by-1 and 2-by-2 blocks. 2-by-2 blocks will be standardized in\nthe form\n          [  a  b  ]\n          [  c  a  ]\n\nwhere b*c < 0. The eigenvalues of such a block are a +- sqrt(bc)."), ('JOBVS', "JOBVS is CHARACTER*1\n= 'N': Schur vectors are not computed;\n= 'V': Schur vectors are computed."), ('SORT', "SORT is CHARACTER*1\nSpecifies whether or not to order the eigenvalues on the\ndiagonal of the Schur form.\n= 'N': Eigenvalues are not ordered;\n= 'S': Eigenvalues are ordered (see SELECT)."), ('SELECT', "SELECT is procedure) LOGICAL FUNCTION of two REAL arguments\nSELECT must be declared EXTERNAL in the calling subroutine.\nIf SORT = 'S', SELECT is used to select eigenvalues to sort\nto the top left of the Schur form.\nIf SORT = 'N', SELECT is not referenced.\nAn eigenvalue WR(j)+sqrt(-1)*WI(j) is selected if\nSELECT(WR(j),WI(j)) is true; i.e., if either one of a\ncomplex conjugate pair of eigenvalues is selected, then both\nare.  Note that a selected complex eigenvalue may no longer\nsatisfy SELECT(WR(j),WI(j)) = .TRUE. after ordering, since\nordering may change the value of complex eigenvalues\n(especially if the eigenvalue is ill-conditioned); in this\ncase INFO may be set to N+3 (see INFO below)."), ('SENSE', "SENSE is CHARACTER*1\nDetermines which reciprocal condition numbers are computed.\n= 'N': None are computed;\n= 'E': Computed for average of selected eigenvalues only;\n= 'V': Computed for selected right invariant subspace only;\n= 'B': Computed for both.\nIf SENSE = 'E', 'V' or 'B', SORT must equal 'S'."), ('N', 'N is INTEGER\nThe order of the matrix A. N >= 0.'), ('A', 'A is REAL array, dimension (LDA, N)\nOn entry, the N-by-N matrix A.\nOn exit, A is overwritten by its real Schur form T.'), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,N).'), ('SDIM', "SDIM is INTEGER\nIf SORT = 'N', SDIM = 0.\nIf SORT = 'S', SDIM = number of eigenvalues (after sorting)\n               for which SELECT is true. (Complex conjugate\n               pairs for which SELECT is true for either\n               eigenvalue count as 2.)"), ('WR', 'WR is REAL array, dimension (N)'), ('WI', 'WI is REAL array, dimension (N)\nWR and WI contain the real and imaginary parts, respectively,\nof the computed eigenvalues, in the same order that they\nappear on the diagonal of the output Schur form T.  Complex\nconjugate pairs of eigenvalues appear consecutively with the\neigenvalue having the positive imaginary part first.'), ('VS', "VS is REAL array, dimension (LDVS,N)\nIf JOBVS = 'V', VS contains the orthogonal matrix Z of Schur\nvectors.\nIf JOBVS = 'N', VS is not referenced."), ('LDVS', "LDVS is INTEGER\nThe leading dimension of the array VS.  LDVS >= 1, and if\nJOBVS = 'V', LDVS >= N."), ('RCONDE', "RCONDE is REAL\nIf SENSE = 'E' or 'B', RCONDE contains the reciprocal\ncondition number for the average of the selected eigenvalues.\nNot referenced if SENSE = 'N' or 'V'."), ('RCONDV', "RCONDV is REAL\nIf SENSE = 'V' or 'B', RCONDV contains the reciprocal\ncondition number for the selected right invariant subspace.\nNot referenced if SENSE = 'N' or 'E'."), ('WORK', 'WORK is REAL array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK.  LWORK >= max(1,3*N).\nAlso, if SENSE = 'E' or 'V' or 'B',\nLWORK >= N+2*SDIM*(N-SDIM), where SDIM is the number of\nselected eigenvalues computed by this routine.  Note that\nN+2*SDIM*(N-SDIM) <= N+N*N/2. Note also that an error is only\nreturned if LWORK < max(1,3*N), but if SENSE = 'E' or 'V' or\n'B' this may not be large enough.\nFor good performance, LWORK must generally be larger.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates upper bounds on the optimal sizes of the\narrays WORK and IWORK, returns these values as the first\nentries of the WORK and IWORK arrays, and no error messages\nrelated to LWORK or LIWORK are issued by XERBLA."), ('IWORK', 'IWORK is INTEGER array, dimension (MAX(1,LIWORK))\nOn exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.'), ('LIWORK', "LIWORK is INTEGER\nThe dimension of the array IWORK.\nLIWORK >= 1; if SENSE = 'V' or 'B', LIWORK >= SDIM*(N-SDIM).\nNote that SDIM*(N-SDIM) <= N*N/4. Note also that an error is\nonly returned if LIWORK < 1, but if SENSE = 'V' or 'B' this\nmay not be large enough.\n\nIf LIWORK = -1, then a workspace query is assumed; the\nroutine only calculates upper bounds on the optimal sizes of\nthe arrays WORK and IWORK, returns these values as the first\nentries of the WORK and IWORK arrays, and no error messages\nrelated to LWORK or LIWORK are issued by XERBLA."), ('BWORK', "BWORK is LOGICAL array, dimension (N)\nNot referenced if SORT = 'N'."), ('INFO', "INFO is INTEGER\n= 0: successful exit\n< 0: if INFO = -i, the i-th argument had an illegal value.\n> 0: if INFO = i, and i is\n   <= N: the QR algorithm failed to compute all the\n         eigenvalues; elements 1:ILO-1 and i+1:N of WR and WI\n         contain those eigenvalues which have converged; if\n         JOBVS = 'V', VS contains the transformation which\n         reduces A to its partially converged Schur form.\n   = N+1: the eigenvalues could not be reordered because some\n         eigenvalues were too close to separate (the problem\n         is very ill-conditioned);\n   = N+2: after reordering, roundoff changed values of some\n         complex eigenvalues so that leading eigenvalues in\n         the Schur form no longer satisfy SELECT=.TRUE.  This\n         could also be caused by underflow due to scaling."))
