(('slals0', 'SLALS0 applies back the multiplying factors of either the left or the\nright singular vector matrix of a diagonal matrix appended by a row\nto the right hand side matrix B in solving the least squares problem\nusing the divide-and-conquer SVD approach.\n\nFor the left singular vector matrix, three types of orthogonal\nmatrices are involved:\n\n(1L) Givens rotations: the number of such rotations is GIVPTR; the\n     pairs of columns/rows they were applied to are stored in GIVCOL;\n     and the C- and S-values of these rotations are stored in GIVNUM.\n\n(2L) Permutation. The (NL+1)-st row of B is to be moved to the first\n     row, and for J=2:N, PERM(J)-th row of B is to be moved to the\n     J-th row.\n\n(3L) The left singular vector matrix of the remaining matrix.\n\nFor the right singular vector matrix, four types of orthogonal\nmatrices are involved:\n\n(1R) The right singular vector matrix of the remaining matrix.\n\n(2R) If SQRE = 1, one extra Givens rotation to generate the right\n     null space.\n\n(3R) The inverse transformation of (2L).\n\n(4R) The inverse transformation of (1L).'), ('ICOMPQ', 'ICOMPQ is INTEGER\npecifies whether singular vectors are to be computed in\nactored form:\n 0: Left singular vector matrix.\n 1: Right singular vector matrix.'), ('NL', 'NL is INTEGER\nhe row dimension of the upper block. NL >= 1.'), ('NR', 'NR is INTEGER\nhe row dimension of the lower block. NR >= 1.'), ('SQRE', 'SQRE is INTEGER\n 0: the lower block is an NR-by-NR square matrix.\n 1: the lower block is an NR-by-(NR+1) rectangular matrix.\n\nhe bidiagonal matrix has row dimension N = NL + NR + 1,\nnd column dimension M = N + SQRE.'), ('NRHS', 'NRHS is INTEGER\nhe number of columns of B and BX. NRHS must be at least 1.'), ('B', 'B is REAL array, dimension ( LDB, NRHS )\nn input, B contains the right hand sides of the least\nquares problem in rows 1 through M. On output, B contains\nhe solution X in rows 1 through N.'), ('LDB', 'LDB is INTEGER\nhe leading dimension of B. LDB must be at least\nax(1,MAX( M, N ) ).'), ('BX', 'BX is REAL array, dimension ( LDBX, NRHS )'), ('LDBX', 'LDBX is INTEGER\nhe leading dimension of BX.'), ('PERM', 'PERM is INTEGER array, dimension ( N )\nhe permutations (from deflation and sorting) applied\no the two blocks.'), ('GIVPTR', 'GIVPTR is INTEGER\nhe number of Givens rotations which took place in this\nubproblem.'), ('GIVCOL', 'GIVCOL is INTEGER array, dimension ( LDGCOL, 2 )\nach pair of numbers indicates a pair of rows/columns\nnvolved in a Givens rotation.'), ('LDGCOL', 'LDGCOL is INTEGER\nhe leading dimension of GIVCOL, must be at least N.'), ('GIVNUM', 'GIVNUM is REAL array, dimension ( LDGNUM, 2 )\nach number indicates the C or S value used in the\norresponding Givens rotation.'), ('LDGNUM', 'LDGNUM is INTEGER\nhe leading dimension of arrays DIFR, POLES and\nIVNUM, must be at least K.'), ('POLES', 'POLES is REAL array, dimension ( LDGNUM, 2 )\nn entry, POLES(1:K, 1) contains the new singular\nalues obtained from solving the secular equation, and\nOLES(1:K, 2) is an array containing the poles in the secular\nquation.'), ('DIFL', 'DIFL is REAL array, dimension ( K ).\nn entry, DIFL(I) is the distance between I-th updated\nundeflated) singular value and the I-th (undeflated) old\ningular value.'), ('DIFR', 'DIFR is REAL array, dimension ( LDGNUM, 2 ).\nn entry, DIFR(I, 1) contains the distances between I-th\npdated (undeflated) singular value and the I+1-th\nundeflated) old singular value. And DIFR(I, 2) is the\normalizing factor for the I-th right singular vector.'), ('Z', 'Z is REAL array, dimension ( K )\nontain the components of the deflation-adjusted updating row\nector.'), ('K', 'K is INTEGER\nontains the dimension of the non-deflated matrix,\nhis is the order of the related secular equation. 1 <= K <=N.'), ('C', 'C is REAL\n contains garbage if SQRE =0 and the C-value of a Givens\notation related to the right null space if SQRE = 1.'), ('S', 'S is REAL\n contains garbage if SQRE =0 and the S-value of a Givens\notation related to the right null space if SQRE = 1.'), ('WORK', 'WORK is REAL array, dimension ( K )'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.'))
