(('zgeru', 'ZGERU  performs the rank 1 operation\n\n   A := alpha*x*y**T + A,\n\nwhere alpha is a scalar, x is an m element vector, y is an n element\nvector and A is an m by n matrix.'), ('M', 'M is INTEGER\n On entry, M specifies the number of rows of the matrix A.\n M must be at least zero.'), ('N', 'N is INTEGER\n On entry, N specifies the number of columns of the matrix A.\n N must be at least zero.'), ('ALPHA', 'ALPHA is COMPLEX*16\n On entry, ALPHA specifies the scalar alpha.'), ('X', 'X is COMPLEX*16 array of dimension at least\n ( 1 + ( m - 1 )*abs( INCX ) ).\n Before entry, the incremented array X must contain the m\n element vector x.'), ('INCX', 'INCX is INTEGER\n On entry, INCX specifies the increment for the elements of\n X. INCX must not be zero.'), ('Y', 'Y is COMPLEX*16 array of dimension at least\n ( 1 + ( n - 1 )*abs( INCY ) ).\n Before entry, the incremented array Y must contain the n\n element vector y.'), ('INCY', 'INCY is INTEGER\n On entry, INCY specifies the increment for the elements of\n Y. INCY must not be zero.'), ('A', 'A is COMPLEX*16 array of DIMENSION ( LDA, n ).\n Before entry, the leading m by n part of the array A must\n contain the matrix of coefficients. On exit, A is\n overwritten by the updated matrix.'), ('LDA', 'LDA is INTEGER\n On entry, LDA specifies the first dimension of A as declared\n in the calling (sub) program. LDA must be at least\n max( 1, m ).'))
