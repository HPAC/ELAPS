(('zhpmv', 'ZHPMV  performs the matrix-vector operation\n\n   y := alpha*A*x + beta*y,\n\nwhere alpha and beta are scalars, x and y are n element vectors and\nA is an n by n hermitian matrix, supplied in packed form.'), ('UPLO', "UPLO is CHARACTER*1\n On entry, UPLO specifies whether the upper or lower\n triangular part of the matrix A is supplied in the packed\n array AP as follows:\n\n    UPLO = 'U' or 'u'   The upper triangular part of A is\n                        supplied in AP.\n\n    UPLO = 'L' or 'l'   The lower triangular part of A is\n                        supplied in AP."), ('N', 'N is INTEGER\n On entry, N specifies the order of the matrix A.\n N must be at least zero.'), ('ALPHA', 'ALPHA is COMPLEX*16\n On entry, ALPHA specifies the scalar alpha.'), ('AP', "AP is COMPLEX*16 array of DIMENSION at least\n ( ( n*( n + 1 ) )/2 ).\n Before entry with UPLO = 'U' or 'u', the array AP must\n contain the upper triangular part of the hermitian matrix\n packed sequentially, column by column, so that AP( 1 )\n contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 )\n and a( 2, 2 ) respectively, and so on.\n Before entry with UPLO = 'L' or 'l', the array AP must\n contain the lower triangular part of the hermitian matrix\n packed sequentially, column by column, so that AP( 1 )\n contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 )\n and a( 3, 1 ) respectively, and so on.\n Note that the imaginary parts of the diagonal elements need\n not be set and are assumed to be zero."), ('X', 'X is COMPLEX*16 array of dimension at least\n ( 1 + ( n - 1 )*abs( INCX ) ).\n Before entry, the incremented array X must contain the n\n element vector x.'), ('INCX', 'INCX is INTEGER\n On entry, INCX specifies the increment for the elements of\n X. INCX must not be zero.'), ('BETA', 'BETA is COMPLEX*16\n On entry, BETA specifies the scalar beta. When BETA is\n supplied as zero then Y need not be set on input.'), ('Y', 'Y is COMPLEX*16 array of dimension at least\n ( 1 + ( n - 1 )*abs( INCY ) ).\n Before entry, the incremented array Y must contain the n\n element vector y. On exit, Y is overwritten by the updated\n vector y.'), ('INCY', 'INCY is INTEGER\n On entry, INCY specifies the increment for the elements of\n Y. INCY must not be zero.'))
