(('clarzb', "CLARZB applies a complex block reflector H or its transpose H**H\nto a complex distributed M-by-N  C from the left or the right.\n\nCurrently, only STOREV = 'R' and DIRECT = 'B' are supported."), ('SIDE', "SIDE is CHARACTER*1\n= 'L': apply H or H**H from the Left\n= 'R': apply H or H**H from the Right"), ('TRANS', "TRANS is CHARACTER*1\n= 'N': apply H (No transpose)\n= 'C': apply H**H (Conjugate transpose)"), ('DIRECT', "DIRECT is CHARACTER*1\nIndicates how H is formed from a product of elementary\nreflectors\n= 'F': H = H(1) H(2) . . . H(k) (Forward, not supported yet)\n= 'B': H = H(k) . . . H(2) H(1) (Backward)"), ('STOREV', "STOREV is CHARACTER*1\nIndicates how the vectors which define the elementary\nreflectors are stored:\n= 'C': Columnwise                        (not supported yet)\n= 'R': Rowwise"), ('M', 'M is INTEGER\nThe number of rows of the matrix C.'), ('N', 'N is INTEGER\nThe number of columns of the matrix C.'), ('K', 'K is INTEGER\nThe order of the matrix T (= the number of elementary\nreflectors whose product defines the block reflector).'), ('L', "L is INTEGER\nThe number of columns of the matrix V containing the\nmeaningful part of the Householder reflectors.\nIf SIDE = 'L', M >= L >= 0, if SIDE = 'R', N >= L >= 0."), ('V', "V is COMPLEX array, dimension (LDV,NV).\nIf STOREV = 'C', NV = K; if STOREV = 'R', NV = L."), ('LDV', "LDV is INTEGER\nThe leading dimension of the array V.\nIf STOREV = 'C', LDV >= L; if STOREV = 'R', LDV >= K."), ('T', 'T is COMPLEX array, dimension (LDT,K)\nThe triangular K-by-K matrix T in the representation of the\nblock reflector.'), ('LDT', 'LDT is INTEGER\nThe leading dimension of the array T. LDT >= K.'), ('C', 'C is COMPLEX array, dimension (LDC,N)\nOn entry, the M-by-N matrix C.\nOn exit, C is overwritten by H*C or H**H*C or C*H or C*H**H.'), ('LDC', 'LDC is INTEGER\nThe leading dimension of the array C. LDC >= max(1,M).'), ('WORK', 'WORK is COMPLEX array, dimension (LDWORK,K)'), ('LDWORK', "LDWORK is INTEGER\nThe leading dimension of the array WORK.\nIf SIDE = 'L', LDWORK >= max(1,N);\nif SIDE = 'R', LDWORK >= max(1,M)."))
