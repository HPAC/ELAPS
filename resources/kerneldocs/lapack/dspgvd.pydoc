(('dspgvd', 'DSPGVD computes all the eigenvalues, and optionally, the eigenvectors\nof a real generalized symmetric-definite eigenproblem, of the form\nA*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\nB are assumed to be symmetric, stored in packed format, and B is also\npositive definite.\nIf eigenvectors are desired, it uses a divide and conquer algorithm.\n\nThe divide and conquer algorithm makes very mild assumptions about\nfloating point arithmetic. It will work on machines with a guard\ndigit in add/subtract, or on those binary machines without guard\ndigits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\nCray-2. It could conceivably fail on hexadecimal or decimal machines\nwithout guard digits, but we know of none.'), ('ITYPE', 'ITYPE is INTEGER\nSpecifies the problem type to be solved:\n= 1:  A*x = (lambda)*B*x\n= 2:  A*B*x = (lambda)*x\n= 3:  B*A*x = (lambda)*x'), ('JOBZ', "JOBZ is CHARACTER*1\n= 'N':  Compute eigenvalues only;\n= 'V':  Compute eigenvalues and eigenvectors."), ('UPLO', "UPLO is CHARACTER*1\n= 'U':  Upper triangles of A and B are stored;\n= 'L':  Lower triangles of A and B are stored."), ('N', 'N is INTEGER\nThe order of the matrices A and B.  N >= 0.'), ('AP', "AP is DOUBLE PRECISION array, dimension (N*(N+1)/2)\nOn entry, the upper or lower triangle of the symmetric matrix\nA, packed columnwise in a linear array.  The j-th column of A\nis stored in the array AP as follows:\nif UPLO = 'U', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\nif UPLO = 'L', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n\nOn exit, the contents of AP are destroyed."), ('BP', "BP is DOUBLE PRECISION array, dimension (N*(N+1)/2)\nOn entry, the upper or lower triangle of the symmetric matrix\nB, packed columnwise in a linear array.  The j-th column of B\nis stored in the array BP as follows:\nif UPLO = 'U', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\nif UPLO = 'L', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n\nOn exit, the triangular factor U or L from the Cholesky\nfactorization B = U**T*U or B = L*L**T, in the same storage\nformat as B."), ('W', 'W is DOUBLE PRECISION array, dimension (N)\nIf INFO = 0, the eigenvalues in ascending order.'), ('Z', "Z is DOUBLE PRECISION array, dimension (LDZ, N)\nIf JOBZ = 'V', then if INFO = 0, Z contains the matrix Z of\neigenvectors.  The eigenvectors are normalized as follows:\nif ITYPE = 1 or 2, Z**T*B*Z = I;\nif ITYPE = 3, Z**T*inv(B)*Z = I.\nIf JOBZ = 'N', then Z is not referenced."), ('LDZ', "LDZ is INTEGER\nThe leading dimension of the array Z.  LDZ >= 1, and if\nJOBZ = 'V', LDZ >= max(1,N)."), ('WORK', 'WORK is DOUBLE PRECISION array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the required LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK.\nIf N <= 1,               LWORK >= 1.\nIf JOBZ = 'N' and N > 1, LWORK >= 2*N.\nIf JOBZ = 'V' and N > 1, LWORK >= 1 + 6*N + 2*N**2.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the required sizes of the WORK and IWORK\narrays, returns these values as the first entries of the WORK\nand IWORK arrays, and no error message related to LWORK or\nLIWORK is issued by XERBLA."), ('IWORK', 'IWORK is INTEGER array, dimension (MAX(1,LIWORK))\nOn exit, if INFO = 0, IWORK(1) returns the required LIWORK.'), ('LIWORK', "LIWORK is INTEGER\nThe dimension of the array IWORK.\nIf JOBZ  = 'N' or N <= 1, LIWORK >= 1.\nIf JOBZ  = 'V' and N > 1, LIWORK >= 3 + 5*N.\n\nIf LIWORK = -1, then a workspace query is assumed; the\nroutine only calculates the required sizes of the WORK and\nIWORK arrays, returns these values as the first entries of\nthe WORK and IWORK arrays, and no error message related to\nLWORK or LIWORK is issued by XERBLA."), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  DPPTRF or DSPEVD returned an error code:\n   <= N:  if INFO = i, DSPEVD failed to converge;\n          i off-diagonal elements of an intermediate\n          tridiagonal form did not converge to zero;\n   > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n          minor of order i of B is not positive definite.\n          The factorization of B could not be completed and\n          no eigenvalues or eigenvectors were computed.'))
