(('ztgexc', 'ZTGEXC reorders the generalized Schur decomposition of a complex\nmatrix pair (A,B), using an unitary equivalence transformation\n(A, B) := Q * (A, B) * Z**H, so that the diagonal block of (A, B) with\nrow index IFST is moved to row ILST.\n\n(A, B) must be in generalized Schur canonical form, that is, A and\nB are both upper triangular.\n\nOptionally, the matrices Q and Z of generalized Schur vectors are\nupdated.\n\n       Q(in) * A(in) * Z(in)**H = Q(out) * A(out) * Z(out)**H\n       Q(in) * B(in) * Z(in)**H = Q(out) * B(out) * Z(out)**H'), ('WANTQ', 'WANTQ is LOGICAL\n.TRUE. : update the left transformation matrix Q;\n.FALSE.: do not update Q.'), ('WANTZ', 'WANTZ is LOGICAL\n.TRUE. : update the right transformation matrix Z;\n.FALSE.: do not update Z.'), ('N', 'N is INTEGER\nThe order of the matrices A and B. N >= 0.'), ('A', 'A is COMPLEX*16 array, dimension (LDA,N)\nOn entry, the upper triangular matrix A in the pair (A, B).\nOn exit, the updated matrix A.'), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A. LDA >= max(1,N).'), ('B', 'B is COMPLEX*16 array, dimension (LDB,N)\nOn entry, the upper triangular matrix B in the pair (A, B).\nOn exit, the updated matrix B.'), ('LDB', 'LDB is INTEGER\nThe leading dimension of the array B. LDB >= max(1,N).'), ('Q', 'Q is COMPLEX*16 array, dimension (LDZ,N)\nOn entry, if WANTQ = .TRUE., the unitary matrix Q.\nOn exit, the updated matrix Q.\nIf WANTQ = .FALSE., Q is not referenced.'), ('LDQ', 'LDQ is INTEGER\nThe leading dimension of the array Q. LDQ >= 1;\nIf WANTQ = .TRUE., LDQ >= N.'), ('Z', 'Z is COMPLEX*16 array, dimension (LDZ,N)\nOn entry, if WANTZ = .TRUE., the unitary matrix Z.\nOn exit, the updated matrix Z.\nIf WANTZ = .FALSE., Z is not referenced.'), ('LDZ', 'LDZ is INTEGER\nThe leading dimension of the array Z. LDZ >= 1;\nIf WANTZ = .TRUE., LDZ >= N.'), ('IFST', 'IFST is INTEGER'), ('ILST', 'ILST is INTEGER\nSpecify the reordering of the diagonal blocks of (A, B).\nThe block with row index IFST is moved to row ILST, by a\nsequence of swapping between adjacent blocks.'), ('INFO', 'INFO is INTEGER\n =0:  Successful exit.\n <0:  if INFO = -i, the i-th argument had an illegal value.\n =1:  The transformed matrix pair (A, B) would be too far\n      from generalized Schur form; the problem is ill-\n      conditioned. (A, B) may have been partially reordered,\n      and ILST points to the first row of the current\n      position of the block being moved.'))
