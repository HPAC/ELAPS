(('ctbsv', 'CTBSV  solves one of the systems of equations\n\n   A*x = b,   or   A**T*x = b,   or   A**H*x = b,\n\nwhere b and x are n element vectors and A is an n by n unit, or\nnon-unit, upper or lower triangular band matrix, with ( k + 1 )\ndiagonals.\n\nNo test for singularity or near-singularity is included in this\nroutine. Such tests must be performed before calling this routine.'), ('UPLO', "UPLO is CHARACTER*1\n On entry, UPLO specifies whether the matrix is an upper or\n lower triangular matrix as follows:\n\n    UPLO = 'U' or 'u'   A is an upper triangular matrix.\n\n    UPLO = 'L' or 'l'   A is a lower triangular matrix."), ('TRANS', "TRANS is CHARACTER*1\n On entry, TRANS specifies the equations to be solved as\n follows:\n\n    TRANS = 'N' or 'n'   A*x = b.\n\n    TRANS = 'T' or 't'   A**T*x = b.\n\n    TRANS = 'C' or 'c'   A**H*x = b."), ('DIAG', "DIAG is CHARACTER*1\n On entry, DIAG specifies whether or not A is unit\n triangular as follows:\n\n    DIAG = 'U' or 'u'   A is assumed to be unit triangular.\n\n    DIAG = 'N' or 'n'   A is not assumed to be unit\n                        triangular."), ('N', 'N is INTEGER\n On entry, N specifies the order of the matrix A.\n N must be at least zero.'), ('K', "K is INTEGER\n On entry with UPLO = 'U' or 'u', K specifies the number of\n super-diagonals of the matrix A.\n On entry with UPLO = 'L' or 'l', K specifies the number of\n sub-diagonals of the matrix A.\n K must satisfy  0 .le. K."), ('A', "A is COMPLEX array of DIMENSION ( LDA, n ).\n Before entry with UPLO = 'U' or 'u', the leading ( k + 1 )\n by n part of the array A must contain the upper triangular\n band part of the matrix of coefficients, supplied column by\n column, with the leading diagonal of the matrix in row\n ( k + 1 ) of the array, the first super-diagonal starting at\n position 2 in row k, and so on. The top left k by k triangle\n of the array A is not referenced.\n The following program segment will transfer an upper\n triangular band matrix from conventional full matrix storage\n to band storage:\n\n       DO 20, J = 1, N\n          M = K + 1 - J\n          DO 10, I = MAX( 1, J - K ), J\n             A( M + I, J ) = matrix( I, J )\n    10    CONTINUE\n    20 CONTINUE\n\n Before entry with UPLO = 'L' or 'l', the leading ( k + 1 )\n by n part of the array A must contain the lower triangular\n band part of the matrix of coefficients, supplied column by\n column, with the leading diagonal of the matrix in row 1 of\n the array, the first sub-diagonal starting at position 1 in\n row 2, and so on. The bottom right k by k triangle of the\n array A is not referenced.\n The following program segment will transfer a lower\n triangular band matrix from conventional full matrix storage\n to band storage:\n\n       DO 20, J = 1, N\n          M = 1 - J\n          DO 10, I = J, MIN( N, J + K )\n             A( M + I, J ) = matrix( I, J )\n    10    CONTINUE\n    20 CONTINUE\n\n Note that when DIAG = 'U' or 'u' the elements of the array A\n corresponding to the diagonal elements of the matrix are not\n referenced, but are assumed to be unity."), ('LDA', 'LDA is INTEGER\n On entry, LDA specifies the first dimension of A as declared\n in the calling (sub) program. LDA must be at least\n ( k + 1 ).'), ('X', 'X is COMPLEX array of dimension at least\n ( 1 + ( n - 1 )*abs( INCX ) ).\n Before entry, the incremented array X must contain the n\n element right-hand side vector b. On exit, X is overwritten\n with the solution vector x.'), ('INCX', 'INCX is INTEGER\n On entry, INCX specifies the increment for the elements of\n X. INCX must not be zero.'))
