(('zunbdb', 'ZUNBDB simultaneously bidiagonalizes the blocks of an M-by-M\npartitioned unitary matrix X:\n\n                                [ B11 | B12 0  0 ]\n    [ X11 | X12 ]   [ P1 |    ] [  0  |  0 -I  0 ] [ Q1 |    ]**H\nX = [-----------] = [---------] [----------------] [---------]   .\n    [ X21 | X22 ]   [    | P2 ] [ B21 | B22 0  0 ] [    | Q2 ]\n                                [  0  |  0  0  I ]\n\nX11 is P-by-Q. Q must be no larger than P, M-P, or M-Q. (If this is\nnot the case, then X must be transposed and/or permuted. This can be\ndone in constant time using the TRANS and SIGNS options. See ZUNCSD\nfor details.)\n\nThe unitary matrices P1, P2, Q1, and Q2 are P-by-P, (M-P)-by-\n(M-P), Q-by-Q, and (M-Q)-by-(M-Q), respectively. They are\nrepresented implicitly by Householder vectors.\n\nB11, B12, B21, and B22 are Q-by-Q bidiagonal matrices represented\nimplicitly by angles THETA, PHI.'), ('TRANS', "TRANS is CHARACTER\n= 'T':      X, U1, U2, V1T, and V2T are stored in row-major\n            order;\notherwise:  X, U1, U2, V1T, and V2T are stored in column-\n            major order."), ('SIGNS', 'SIGNS is CHARACTER\n= \'O\':      The lower-left block is made nonpositive (the\n            "other" convention);\notherwise:  The upper-right block is made nonpositive (the\n            "default" convention).'), ('M', 'M is INTEGER\nThe number of rows and columns in X.'), ('P', 'P is INTEGER\nThe number of rows in X11 and X12. 0 <= P <= M.'), ('Q', 'Q is INTEGER\nThe number of columns in X11 and X21. 0 <= Q <=\nMIN(P,M-P,M-Q).'), ('X11', "X11 is COMPLEX*16 array, dimension (LDX11,Q)\nOn entry, the top-left block of the unitary matrix to be\nreduced. On exit, the form depends on TRANS:\nIf TRANS = 'N', then\n   the columns of tril(X11) specify reflectors for P1,\n   the rows of triu(X11,1) specify reflectors for Q1;\nelse TRANS = 'T', and\n   the rows of triu(X11) specify reflectors for P1,\n   the columns of tril(X11,-1) specify reflectors for Q1."), ('LDX11', "LDX11 is INTEGER\nThe leading dimension of X11. If TRANS = 'N', then LDX11 >=\nP; else LDX11 >= Q."), ('X12', "X12 is COMPLEX*16 array, dimension (LDX12,M-Q)\nOn entry, the top-right block of the unitary matrix to\nbe reduced. On exit, the form depends on TRANS:\nIf TRANS = 'N', then\n   the rows of triu(X12) specify the first P reflectors for\n   Q2;\nelse TRANS = 'T', and\n   the columns of tril(X12) specify the first P reflectors\n   for Q2."), ('LDX12', "LDX12 is INTEGER\nThe leading dimension of X12. If TRANS = 'N', then LDX12 >=\nP; else LDX11 >= M-Q."), ('X21', "X21 is COMPLEX*16 array, dimension (LDX21,Q)\nOn entry, the bottom-left block of the unitary matrix to\nbe reduced. On exit, the form depends on TRANS:\nIf TRANS = 'N', then\n   the columns of tril(X21) specify reflectors for P2;\nelse TRANS = 'T', and\n   the rows of triu(X21) specify reflectors for P2."), ('LDX21', "LDX21 is INTEGER\nThe leading dimension of X21. If TRANS = 'N', then LDX21 >=\nM-P; else LDX21 >= Q."), ('X22', "X22 is COMPLEX*16 array, dimension (LDX22,M-Q)\nOn entry, the bottom-right block of the unitary matrix to\nbe reduced. On exit, the form depends on TRANS:\nIf TRANS = 'N', then\n   the rows of triu(X22(Q+1:M-P,P+1:M-Q)) specify the last\n   M-P-Q reflectors for Q2,\nelse TRANS = 'T', and\n   the columns of tril(X22(P+1:M-Q,Q+1:M-P)) specify the last\n   M-P-Q reflectors for P2."), ('LDX22', "LDX22 is INTEGER\nThe leading dimension of X22. If TRANS = 'N', then LDX22 >=\nM-P; else LDX22 >= M-Q."), ('THETA', 'THETA is DOUBLE PRECISION array, dimension (Q)\nThe entries of the bidiagonal blocks B11, B12, B21, B22 can\nbe computed from the angles THETA and PHI. See Further\nDetails.'), ('PHI', 'PHI is DOUBLE PRECISION array, dimension (Q-1)\nThe entries of the bidiagonal blocks B11, B12, B21, B22 can\nbe computed from the angles THETA and PHI. See Further\nDetails.'), ('TAUP1', 'TAUP1 is COMPLEX*16 array, dimension (P)\nThe scalar factors of the elementary reflectors that define\nP1.'), ('TAUP2', 'TAUP2 is COMPLEX*16 array, dimension (M-P)\nThe scalar factors of the elementary reflectors that define\nP2.'), ('TAUQ1', 'TAUQ1 is COMPLEX*16 array, dimension (Q)\nThe scalar factors of the elementary reflectors that define\nQ1.'), ('TAUQ2', 'TAUQ2 is COMPLEX*16 array, dimension (M-Q)\nThe scalar factors of the elementary reflectors that define\nQ2.'), ('WORK', 'WORK is COMPLEX*16 array, dimension (LWORK)'), ('LWORK', 'LWORK is INTEGER\nThe dimension of the array WORK. LWORK >= M-Q.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal size of the WORK array, returns\nthis value as the first entry of the WORK array, and no error\nmessage related to LWORK is issued by XERBLA.'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.'))
