(('zcposv', "ZCPOSV computes the solution to a complex system of linear equations\n   A * X = B,\nwhere A is an N-by-N Hermitian positive definite matrix and X and B\nare N-by-NRHS matrices.\n\nZCPOSV first attempts to factorize the matrix in COMPLEX and use this\nfactorization within an iterative refinement procedure to produce a\nsolution with COMPLEX*16 normwise backward error quality (see below).\nIf the approach fails the method switches to a COMPLEX*16\nfactorization and solve.\n\nThe iterative refinement is not going to be a winning strategy if\nthe ratio COMPLEX performance over COMPLEX*16 performance is too\nsmall. A reasonable strategy should take the number of right-hand\nsides and the size of the matrix into account. This might be done\nwith a call to ILAENV in the future. Up to now, we always try\niterative refinement.\n\nThe iterative refinement process is stopped if\n    ITER > ITERMAX\nor for all the RHS we have:\n    RNRM < SQRT(N)*XNRM*ANRM*EPS*BWDMAX\nwhere\n    o ITER is the number of the current iteration in the iterative\n      refinement process\n    o RNRM is the infinity-norm of the residual\n    o XNRM is the infinity-norm of the solution\n    o ANRM is the infinity-operator-norm of the matrix A\n    o EPS is the machine epsilon returned by DLAMCH('Epsilon')\nThe value ITERMAX and BWDMAX are fixed to 30 and 1.0D+00\nrespectively."), ('UPLO', "UPLO is CHARACTER*1\n= 'U':  Upper triangle of A is stored;\n= 'L':  Lower triangle of A is stored."), ('N', 'N is INTEGER\nThe number of linear equations, i.e., the order of the\nmatrix A.  N >= 0.'), ('NRHS', 'NRHS is INTEGER\nThe number of right hand sides, i.e., the number of columns\nof the matrix B.  NRHS >= 0.'), ('A', "A is COMPLEX*16 array,\ndimension (LDA,N)\nOn entry, the Hermitian matrix A. If UPLO = 'U', the leading\nN-by-N upper triangular part of A contains the upper\ntriangular part of the matrix A, and the strictly lower\ntriangular part of A is not referenced.  If UPLO = 'L', the\nleading N-by-N lower triangular part of A contains the lower\ntriangular part of the matrix A, and the strictly upper\ntriangular part of A is not referenced.\n\nNote that the imaginary parts of the diagonal\nelements need not be set and are assumed to be zero.\n\nOn exit, if iterative refinement has been successfully used\n(INFO.EQ.0 and ITER.GE.0, see description below), then A is\nunchanged, if double precision factorization has been used\n(INFO.EQ.0 and ITER.LT.0, see description below), then the\narray A contains the factor U or L from the Cholesky\nfactorization A = U**H*U or A = L*L**H."), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,N).'), ('B', 'B is COMPLEX*16 array, dimension (LDB,NRHS)\nThe N-by-NRHS right hand side matrix B.'), ('LDB', 'LDB is INTEGER\nThe leading dimension of the array B.  LDB >= max(1,N).'), ('X', 'X is COMPLEX*16 array, dimension (LDX,NRHS)\nIf INFO = 0, the N-by-NRHS solution matrix X.'), ('LDX', 'LDX is INTEGER\nThe leading dimension of the array X.  LDX >= max(1,N).'), ('WORK', 'WORK is COMPLEX*16 array, dimension (N*NRHS)\nThis array is used to hold the residual vectors.'), ('SWORK', 'SWORK is COMPLEX array, dimension (N*(N+NRHS))\nThis array is used to use the single precision matrix and the\nright-hand sides or solutions in single precision.'), ('RWORK', 'RWORK is DOUBLE PRECISION array, dimension (N)'), ('ITER', 'ITER is INTEGER\n< 0: iterative refinement has failed, COMPLEX*16\n     factorization has been performed\n     -1 : the routine fell back to full precision for\n          implementation- or machine-specific reasons\n     -2 : narrowing the precision induced an overflow,\n          the routine fell back to full precision\n     -3 : failure of CPOTRF\n     -31: stop the iterative refinement after the 30th\n          iterations\n> 0: iterative refinement has been sucessfully used.\n     Returns the number of iterations'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  if INFO = i, the leading minor of order i of\n      (COMPLEX*16) A is not positive definite, so the\n      factorization could not be completed, and the solution\n      has not been computed.'))
