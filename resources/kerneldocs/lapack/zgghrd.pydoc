(('zgghrd', 'ZGGHRD reduces a pair of complex matrices (A,B) to generalized upper\nHessenberg form using unitary transformations, where A is a\ngeneral matrix and B is upper triangular.  The form of the\ngeneralized eigenvalue problem is\n   A*x = lambda*B*x,\nand B is typically made upper triangular by computing its QR\nfactorization and moving the unitary matrix Q to the left side\nof the equation.\n\nThis subroutine simultaneously reduces A to a Hessenberg matrix H:\n   Q**H*A*Z = H\nand transforms B to another upper triangular matrix T:\n   Q**H*B*Z = T\nin order to reduce the problem to its standard form\n   H*y = lambda*T*y\nwhere y = Z**H*x.\n\nThe unitary matrices Q and Z are determined as products of Givens\nrotations.  They may either be formed explicitly, or they may be\npostmultiplied into input matrices Q1 and Z1, so that\n     Q1 * A * Z1**H = (Q1*Q) * H * (Z1*Z)**H\n     Q1 * B * Z1**H = (Q1*Q) * T * (Z1*Z)**H\nIf Q1 is the unitary matrix from the QR factorization of B in the\noriginal equation A*x = lambda*B*x, then ZGGHRD reduces the original\nproblem to generalized Hessenberg form.'), ('COMPQ', "COMPQ is CHARACTER*1\n= 'N': do not compute Q;\n= 'I': Q is initialized to the unit matrix, and the\n       unitary matrix Q is returned;\n= 'V': Q must contain a unitary matrix Q1 on entry,\n       and the product Q1*Q is returned."), ('COMPZ', "COMPZ is CHARACTER*1\n= 'N': do not compute Q;\n= 'I': Q is initialized to the unit matrix, and the\n       unitary matrix Q is returned;\n= 'V': Q must contain a unitary matrix Q1 on entry,\n       and the product Q1*Q is returned."), ('N', 'N is INTEGER\nThe order of the matrices A and B.  N >= 0.'), ('ILO', 'ILO is INTEGER'), ('IHI', 'IHI is INTEGER\n\nILO and IHI mark the rows and columns of A which are to be\nreduced.  It is assumed that A is already upper triangular\nin rows and columns 1:ILO-1 and IHI+1:N.  ILO and IHI are\nnormally set by a previous call to ZGGBAL; otherwise they\nshould be set to 1 and N respectively.\n1 <= ILO <= IHI <= N, if N > 0; ILO=1 and IHI=0, if N=0.'), ('A', 'A is COMPLEX*16 array, dimension (LDA, N)\nOn entry, the N-by-N general matrix to be reduced.\nOn exit, the upper triangle and the first subdiagonal of A\nare overwritten with the upper Hessenberg matrix H, and the\nrest is set to zero.'), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,N).'), ('B', 'B is COMPLEX*16 array, dimension (LDB, N)\nOn entry, the N-by-N upper triangular matrix B.\nOn exit, the upper triangular matrix T = Q**H B Z.  The\nelements below the diagonal are set to zero.'), ('LDB', 'LDB is INTEGER\nThe leading dimension of the array B.  LDB >= max(1,N).'), ('Q', "Q is COMPLEX*16 array, dimension (LDQ, N)\nOn entry, if COMPQ = 'V', the unitary matrix Q1, typically\nfrom the QR factorization of B.\nOn exit, if COMPQ='I', the unitary matrix Q, and if\nCOMPQ = 'V', the product Q1*Q.\nNot referenced if COMPQ='N'."), ('LDQ', "LDQ is INTEGER\nThe leading dimension of the array Q.\nLDQ >= N if COMPQ='V' or 'I'; LDQ >= 1 otherwise."), ('Z', "Z is COMPLEX*16 array, dimension (LDZ, N)\nOn entry, if COMPZ = 'V', the unitary matrix Z1.\nOn exit, if COMPZ='I', the unitary matrix Z, and if\nCOMPZ = 'V', the product Z1*Z.\nNot referenced if COMPZ='N'."), ('LDZ', "LDZ is INTEGER\nThe leading dimension of the array Z.\nLDZ >= N if COMPZ='V' or 'I'; LDZ >= 1 otherwise."), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.'))
