(('claqr2', 'CLAQR2 is identical to CLAQR3 except that it avoids\nrecursion by calling CLAHQR instead of CLAQR4.\n\nAggressive early deflation:\n\nThis subroutine accepts as input an upper Hessenberg matrix\nH and performs an unitary similarity transformation\ndesigned to detect and deflate fully converged eigenvalues from\na trailing principal submatrix.  On output H has been over-\nwritten by a new Hessenberg matrix that is a perturbation of\nan unitary similarity transformation of H.  It is to be\nhoped that the final version of H has many zero subdiagonal\nentries.'), ('WANTT', 'WANTT is LOGICAL\nIf .TRUE., then the Hessenberg matrix H is fully updated\nso that the triangular Schur factor may be\ncomputed (in cooperation with the calling subroutine).\nIf .FALSE., then only enough of H is updated to preserve\nthe eigenvalues.'), ('WANTZ', 'WANTZ is LOGICAL\nIf .TRUE., then the unitary matrix Z is updated so\nso that the unitary Schur factor may be computed\n(in cooperation with the calling subroutine).\nIf .FALSE., then Z is not referenced.'), ('N', 'N is INTEGER\nThe order of the matrix H and (if WANTZ is .TRUE.) the\norder of the unitary matrix Z.'), ('KTOP', 'KTOP is INTEGER\nIt is assumed that either KTOP = 1 or H(KTOP,KTOP-1)=0.\nKBOT and KTOP together determine an isolated block\nalong the diagonal of the Hessenberg matrix.'), ('KBOT', 'KBOT is INTEGER\nIt is assumed without a check that either\nKBOT = N or H(KBOT+1,KBOT)=0.  KBOT and KTOP together\ndetermine an isolated block along the diagonal of the\nHessenberg matrix.'), ('NW', 'NW is INTEGER\nDeflation window size.  1 .LE. NW .LE. (KBOT-KTOP+1).'), ('H', 'H is COMPLEX array, dimension (LDH,N)\nOn input the initial N-by-N section of H stores the\nHessenberg matrix undergoing aggressive early deflation.\nOn output H has been transformed by a unitary\nsimilarity transformation, perturbed, and the returned\nto Hessenberg form that (it is to be hoped) has some\nzero subdiagonal entries.'), ('LDH', 'LDH is integer\nLeading dimension of H just as declared in the calling\nsubroutine.  N .LE. LDH'), ('ILOZ', 'ILOZ is INTEGER'), ('IHIZ', 'IHIZ is INTEGER\nSpecify the rows of Z to which transformations must be\napplied if WANTZ is .TRUE.. 1 .LE. ILOZ .LE. IHIZ .LE. N.'), ('Z', 'Z is COMPLEX array, dimension (LDZ,N)\nIF WANTZ is .TRUE., then on output, the unitary\nsimilarity transformation mentioned above has been\naccumulated into Z(ILOZ:IHIZ,ILO:IHI) from the right.\nIf WANTZ is .FALSE., then Z is unreferenced.'), ('LDZ', 'LDZ is integer\nThe leading dimension of Z just as declared in the\ncalling subroutine.  1 .LE. LDZ.'), ('NS', 'NS is integer\nThe number of unconverged (ie approximate) eigenvalues\nreturned in SR and SI that may be used as shifts by the\ncalling subroutine.'), ('ND', 'ND is integer\nThe number of converged eigenvalues uncovered by this\nsubroutine.'), ('SH', 'SH is COMPLEX array, dimension KBOT\nOn output, approximate eigenvalues that may\nbe used for shifts are stored in SH(KBOT-ND-NS+1)\nthrough SR(KBOT-ND).  Converged eigenvalues are\nstored in SH(KBOT-ND+1) through SH(KBOT).'), ('V', 'V is COMPLEX array, dimension (LDV,NW)\nAn NW-by-NW work array.'), ('LDV', 'LDV is integer scalar\nThe leading dimension of V just as declared in the\ncalling subroutine.  NW .LE. LDV'), ('NH', 'NH is integer scalar\nThe number of columns of T.  NH.GE.NW.'), ('T', 'T is COMPLEX array, dimension (LDT,NW)'), ('LDT', 'LDT is integer\nThe leading dimension of T just as declared in the\ncalling subroutine.  NW .LE. LDT'), ('NV', 'NV is integer\nThe number of rows of work array WV available for\nworkspace.  NV.GE.NW.'), ('WV', 'WV is COMPLEX array, dimension (LDWV,NW)'), ('LDWV', 'LDWV is integer\nThe leading dimension of W just as declared in the\ncalling subroutine.  NW .LE. LDV'), ('WORK', 'WORK is COMPLEX array, dimension LWORK.\nOn exit, WORK(1) is set to an estimate of the optimal value\nof LWORK for the given values of N, NW, KTOP and KBOT.'), ('LWORK', 'LWORK is integer\nThe dimension of the work array WORK.  LWORK = 2*NW\nsuffices, but greater efficiency may result from larger\nvalues of LWORK.\n\nIf LWORK = -1, then a workspace query is assumed; CLAQR2\nonly estimates the optimal workspace size for the given\nvalues of N, NW, KTOP and KBOT.  The estimate is returned\nin WORK(1).  No error message related to LWORK is issued\nby XERBLA.  Neither H nor Z are accessed.'))
