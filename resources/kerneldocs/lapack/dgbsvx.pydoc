(('dgbsvx', 'DGBSVX uses the LU factorization to compute the solution to a real\nsystem of linear equations A * X = B, A**T * X = B, or A**H * X = B,\nwhere A is a band matrix of order N with KL subdiagonals and KU\nsuperdiagonals, and X and B are N-by-NRHS matrices.\n\nError bounds on the solution and a condition estimate are also\nprovided.'), ('FACT', "FACT is CHARACTER*1\nSpecifies whether or not the factored form of the matrix A is\nsupplied on entry, and if not, whether the matrix A should be\nequilibrated before it is factored.\n= 'F':  On entry, AFB and IPIV contain the factored form of\n        A.  If EQUED is not 'N', the matrix A has been\n        equilibrated with scaling factors given by R and C.\n        AB, AFB, and IPIV are not modified.\n= 'N':  The matrix A will be copied to AFB and factored.\n= 'E':  The matrix A will be equilibrated if necessary, then\n        copied to AFB and factored."), ('TRANS', "TRANS is CHARACTER*1\nSpecifies the form of the system of equations.\n= 'N':  A * X = B     (No transpose)\n= 'T':  A**T * X = B  (Transpose)\n= 'C':  A**H * X = B  (Transpose)"), ('N', 'N is INTEGER\nThe number of linear equations, i.e., the order of the\nmatrix A.  N >= 0.'), ('KL', 'KL is INTEGER\nThe number of subdiagonals within the band of A.  KL >= 0.'), ('KU', 'KU is INTEGER\nThe number of superdiagonals within the band of A.  KU >= 0.'), ('NRHS', 'NRHS is INTEGER\nThe number of right hand sides, i.e., the number of columns\nof the matrices B and X.  NRHS >= 0.'), ('AB', "AB is DOUBLE PRECISION array, dimension (LDAB,N)\nOn entry, the matrix A in band storage, in rows 1 to KL+KU+1.\nThe j-th column of A is stored in the j-th column of the\narray AB as follows:\nAB(KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+kl)\n\nIf FACT = 'F' and EQUED is not 'N', then A must have been\nequilibrated by the scaling factors in R and/or C.  AB is not\nmodified if FACT = 'F' or 'N', or if FACT = 'E' and\nEQUED = 'N' on exit.\n\nOn exit, if EQUED .ne. 'N', A is scaled as follows:\nEQUED = 'R':  A := diag(R) * A\nEQUED = 'C':  A := A * diag(C)\nEQUED = 'B':  A := diag(R) * A * diag(C)."), ('LDAB', 'LDAB is INTEGER\nThe leading dimension of the array AB.  LDAB >= KL+KU+1.'), ('AFB', "AFB is DOUBLE PRECISION array, dimension (LDAFB,N)\nIf FACT = 'F', then AFB is an input argument and on entry\ncontains details of the LU factorization of the band matrix\nA, as computed by DGBTRF.  U is stored as an upper triangular\nband matrix with KL+KU superdiagonals in rows 1 to KL+KU+1,\nand the multipliers used during the factorization are stored\nin rows KL+KU+2 to 2*KL+KU+1.  If EQUED .ne. 'N', then AFB is\nthe factored form of the equilibrated matrix A.\n\nIf FACT = 'N', then AFB is an output argument and on exit\nreturns details of the LU factorization of A.\n\nIf FACT = 'E', then AFB is an output argument and on exit\nreturns details of the LU factorization of the equilibrated\nmatrix A (see the description of AB for the form of the\nequilibrated matrix)."), ('LDAFB', 'LDAFB is INTEGER\nThe leading dimension of the array AFB.  LDAFB >= 2*KL+KU+1.'), ('IPIV', "IPIV is INTEGER array, dimension (N)\nIf FACT = 'F', then IPIV is an input argument and on entry\ncontains the pivot indices from the factorization A = L*U\nas computed by DGBTRF; row i of the matrix was interchanged\nwith row IPIV(i).\n\nIf FACT = 'N', then IPIV is an output argument and on exit\ncontains the pivot indices from the factorization A = L*U\nof the original matrix A.\n\nIf FACT = 'E', then IPIV is an output argument and on exit\ncontains the pivot indices from the factorization A = L*U\nof the equilibrated matrix A."), ('EQUED', "EQUED is CHARACTER*1\nSpecifies the form of equilibration that was done.\n= 'N':  No equilibration (always true if FACT = 'N').\n= 'R':  Row equilibration, i.e., A has been premultiplied by\n        diag(R).\n= 'C':  Column equilibration, i.e., A has been postmultiplied\n        by diag(C).\n= 'B':  Both row and column equilibration, i.e., A has been\n        replaced by diag(R) * A * diag(C).\nEQUED is an input argument if FACT = 'F'; otherwise, it is an\noutput argument."), ('R', "R is DOUBLE PRECISION array, dimension (N)\nThe row scale factors for A.  If EQUED = 'R' or 'B', A is\nmultiplied on the left by diag(R); if EQUED = 'N' or 'C', R\nis not accessed.  R is an input argument if FACT = 'F';\notherwise, R is an output argument.  If FACT = 'F' and\nEQUED = 'R' or 'B', each element of R must be positive."), ('C', "C is DOUBLE PRECISION array, dimension (N)\nThe column scale factors for A.  If EQUED = 'C' or 'B', A is\nmultiplied on the right by diag(C); if EQUED = 'N' or 'R', C\nis not accessed.  C is an input argument if FACT = 'F';\notherwise, C is an output argument.  If FACT = 'F' and\nEQUED = 'C' or 'B', each element of C must be positive."), ('B', "B is DOUBLE PRECISION array, dimension (LDB,NRHS)\nOn entry, the right hand side matrix B.\nOn exit,\nif EQUED = 'N', B is not modified;\nif TRANS = 'N' and EQUED = 'R' or 'B', B is overwritten by\ndiag(R)*B;\nif TRANS = 'T' or 'C' and EQUED = 'C' or 'B', B is\noverwritten by diag(C)*B."), ('LDB', 'LDB is INTEGER\nThe leading dimension of the array B.  LDB >= max(1,N).'), ('X', "X is DOUBLE PRECISION array, dimension (LDX,NRHS)\nIf INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\nto the original system of equations.  Note that A and B are\nmodified on exit if EQUED .ne. 'N', and the solution to the\nequilibrated system is inv(diag(C))*X if TRANS = 'N' and\nEQUED = 'C' or 'B', or inv(diag(R))*X if TRANS = 'T' or 'C'\nand EQUED = 'R' or 'B'."), ('LDX', 'LDX is INTEGER\nThe leading dimension of the array X.  LDX >= max(1,N).'), ('RCOND', 'RCOND is DOUBLE PRECISION\nThe estimate of the reciprocal condition number of the matrix\nA after equilibration (if done).  If RCOND is less than the\nmachine precision (in particular, if RCOND = 0), the matrix\nis singular to working precision.  This condition is\nindicated by a return code of INFO > 0.'), ('FERR', 'FERR is DOUBLE PRECISION array, dimension (NRHS)\nThe estimated forward error bound for each solution vector\nX(j) (the j-th column of the solution matrix X).\nIf XTRUE is the true solution corresponding to X(j), FERR(j)\nis an estimated upper bound for the magnitude of the largest\nelement in (X(j) - XTRUE) divided by the magnitude of the\nlargest element in X(j).  The estimate is as reliable as\nthe estimate for RCOND, and is almost always a slight\noverestimate of the true error.'), ('BERR', 'BERR is DOUBLE PRECISION array, dimension (NRHS)\nThe componentwise relative backward error of each solution\nvector X(j) (i.e., the smallest relative change in\nany element of A or B that makes X(j) an exact solution).'), ('WORK', 'WORK is DOUBLE PRECISION array, dimension (3*N)\nOn exit, WORK(1) contains the reciprocal pivot growth\nfactor norm(A)/norm(U). The "max absolute element" norm is\nused. If WORK(1) is much less than 1, then the stability\nof the LU factorization of the (equilibrated) matrix A\ncould be poor. This also means that the solution X, condition\nestimator RCOND, and forward error bound FERR could be\nunreliable. If factorization fails with 0<INFO<=N, then\nWORK(1) contains the reciprocal pivot growth factor for the\nleading INFO columns of A.'), ('IWORK', 'IWORK is INTEGER array, dimension (N)'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  if INFO = i, and i is\n      <= N:  U(i,i) is exactly zero.  The factorization\n             has been completed, but the factor U is exactly\n             singular, so the solution and error bounds\n             could not be computed. RCOND = 0 is returned.\n      = N+1: U is nonsingular, but RCOND is less than machine\n             precision, meaning that the matrix is singular\n             to working precision.  Nevertheless, the\n             solution and error bounds are computed because\n             there are a number of situations where the\n             computed solution can be more accurate than the\n             value of RCOND would suggest.'))
