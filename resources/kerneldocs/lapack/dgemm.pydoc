(('dgemm', 'DGEMM  performs one of the matrix-matrix operations\n\n   C := alpha*op( A )*op( B ) + beta*C,\n\nwhere  op( X ) is one of\n\n   op( X ) = X   or   op( X ) = X**T,\n\nalpha and beta are scalars, and A, B and C are matrices, with op( A )\nan m by k matrix,  op( B )  a  k by n matrix and  C an m by n matrix.'), ('TRANSA', "TRANSA is CHARACTER*1\n On entry, TRANSA specifies the form of op( A ) to be used in\n the matrix multiplication as follows:\n\n    TRANSA = 'N' or 'n',  op( A ) = A.\n\n    TRANSA = 'T' or 't',  op( A ) = A**T.\n\n    TRANSA = 'C' or 'c',  op( A ) = A**T."), ('TRANSB', "TRANSB is CHARACTER*1\n On entry, TRANSB specifies the form of op( B ) to be used in\n the matrix multiplication as follows:\n\n    TRANSB = 'N' or 'n',  op( B ) = B.\n\n    TRANSB = 'T' or 't',  op( B ) = B**T.\n\n    TRANSB = 'C' or 'c',  op( B ) = B**T."), ('M', 'M is INTEGER\n On entry,  M  specifies  the number  of rows  of the  matrix\n op( A )  and of the  matrix  C.  M  must  be at least  zero.'), ('N', 'N is INTEGER\n On entry,  N  specifies the number  of columns of the matrix\n op( B ) and the number of columns of the matrix C. N must be\n at least zero.'), ('K', 'K is INTEGER\n On entry,  K  specifies  the number of columns of the matrix\n op( A ) and the number of rows of the matrix op( B ). K must\n be at least  zero.'), ('ALPHA', 'ALPHA is DOUBLE PRECISION.\n On entry, ALPHA specifies the scalar alpha.'), ('A', "A is DOUBLE PRECISION array of DIMENSION ( LDA, ka ), where ka is\n k  when  TRANSA = 'N' or 'n',  and is  m  otherwise.\n Before entry with  TRANSA = 'N' or 'n',  the leading  m by k\n part of the array  A  must contain the matrix  A,  otherwise\n the leading  k by m  part of the array  A  must contain  the\n matrix A."), ('LDA', "LDA is INTEGER\n On entry, LDA specifies the first dimension of A as declared\n in the calling (sub) program. When  TRANSA = 'N' or 'n' then\n LDA must be at least  max( 1, m ), otherwise  LDA must be at\n least  max( 1, k )."), ('B', "B is DOUBLE PRECISION array of DIMENSION ( LDB, kb ), where kb is\n n  when  TRANSB = 'N' or 'n',  and is  k  otherwise.\n Before entry with  TRANSB = 'N' or 'n',  the leading  k by n\n part of the array  B  must contain the matrix  B,  otherwise\n the leading  n by k  part of the array  B  must contain  the\n matrix B."), ('LDB', "LDB is INTEGER\n On entry, LDB specifies the first dimension of B as declared\n in the calling (sub) program. When  TRANSB = 'N' or 'n' then\n LDB must be at least  max( 1, k ), otherwise  LDB must be at\n least  max( 1, n )."), ('BETA', 'BETA is DOUBLE PRECISION.\n On entry,  BETA  specifies the scalar  beta.  When  BETA  is\n supplied as zero then C need not be set on input.'), ('C', 'C is DOUBLE PRECISION array of DIMENSION ( LDC, n ).\n Before entry, the leading  m by n  part of the array  C must\n contain the matrix  C,  except when  beta  is zero, in which\n case C need not be set on entry.\n On exit, the array  C  is overwritten by the  m by n  matrix\n ( alpha*op( A )*op( B ) + beta*C ).'), ('LDC', 'LDC is INTEGER\n On entry, LDC specifies the first dimension of C as declared\n in  the  calling  (sub)  program.   LDC  must  be  at  least\n max( 1, m ).'))
