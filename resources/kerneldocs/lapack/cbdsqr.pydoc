(('cbdsqr', 'CBDSQR computes the singular values and, optionally, the right and/or\nleft singular vectors from the singular value decomposition (SVD) of\na real N-by-N (upper or lower) bidiagonal matrix B using the implicit\nzero-shift QR algorithm.  The SVD of B has the form\n\n   B = Q * S * P**H\n\nwhere S is the diagonal matrix of singular values, Q is an orthogonal\nmatrix of left singular vectors, and P is an orthogonal matrix of\nright singular vectors.  If left singular vectors are requested, this\nsubroutine actually returns U*Q instead of Q, and, if right singular\nvectors are requested, this subroutine returns P**H*VT instead of\nP**H, for given complex input matrices U and VT.  When U and VT are\nthe unitary matrices that reduce a general matrix A to bidiagonal\nform: A = U*B*VT, as computed by CGEBRD, then\n\n   A = (U*Q) * S * (P**H*VT)\n\nis the SVD of A.  Optionally, the subroutine may also compute Q**H*C\nfor a given complex input matrix C.\n\nSee "Computing  Small Singular Values of Bidiagonal Matrices With\nGuaranteed High Relative Accuracy," by J. Demmel and W. Kahan,\nLAPACK Working Note #3 (or SIAM J. Sci. Statist. Comput. vol. 11,\nno. 5, pp. 873-912, Sept 1990) and\n"Accurate singular values and differential qd algorithms," by\nB. Parlett and V. Fernando, Technical Report CPAM-554, Mathematics\nDepartment, University of California at Berkeley, July 1992\nfor a detailed description of the algorithm.'), ('UPLO', "UPLO is CHARACTER*1\n= 'U':  B is upper bidiagonal;\n= 'L':  B is lower bidiagonal."), ('N', 'N is INTEGER\nThe order of the matrix B.  N >= 0.'), ('NCVT', 'NCVT is INTEGER\nThe number of columns of the matrix VT. NCVT >= 0.'), ('NRU', 'NRU is INTEGER\nThe number of rows of the matrix U. NRU >= 0.'), ('NCC', 'NCC is INTEGER\nThe number of columns of the matrix C. NCC >= 0.'), ('D', 'D is REAL array, dimension (N)\nOn entry, the n diagonal elements of the bidiagonal matrix B.\nOn exit, if INFO=0, the singular values of B in decreasing\norder.'), ('E', 'E is REAL array, dimension (N-1)\nOn entry, the N-1 offdiagonal elements of the bidiagonal\nmatrix B.\nOn exit, if INFO = 0, E is destroyed; if INFO > 0, D and E\nwill contain the diagonal and superdiagonal elements of a\nbidiagonal matrix orthogonally equivalent to the one given\nas input.'), ('VT', 'VT is COMPLEX array, dimension (LDVT, NCVT)\nOn entry, an N-by-NCVT matrix VT.\nOn exit, VT is overwritten by P**H * VT.\nNot referenced if NCVT = 0.'), ('LDVT', 'LDVT is INTEGER\nThe leading dimension of the array VT.\nLDVT >= max(1,N) if NCVT > 0; LDVT >= 1 if NCVT = 0.'), ('U', 'U is COMPLEX array, dimension (LDU, N)\nOn entry, an NRU-by-N matrix U.\nOn exit, U is overwritten by U * Q.\nNot referenced if NRU = 0.'), ('LDU', 'LDU is INTEGER\nThe leading dimension of the array U.  LDU >= max(1,NRU).'), ('C', 'C is COMPLEX array, dimension (LDC, NCC)\nOn entry, an N-by-NCC matrix C.\nOn exit, C is overwritten by Q**H * C.\nNot referenced if NCC = 0.'), ('LDC', 'LDC is INTEGER\nThe leading dimension of the array C.\nLDC >= max(1,N) if NCC > 0; LDC >=1 if NCC = 0.'), ('RWORK', 'RWORK is REAL array, dimension (4*N)'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  If INFO = -i, the i-th argument had an illegal value\n> 0:  the algorithm did not converge; D and E contain the\n      elements of a bidiagonal matrix which is orthogonally\n      similar to the input matrix B;  if INFO = i, i\n      elements of E have not converged to zero.'))
