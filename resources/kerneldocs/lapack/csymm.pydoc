(('csymm', 'CSYMM  performs one of the matrix-matrix operations\n\n   C := alpha*A*B + beta*C,\n\nor\n\n   C := alpha*B*A + beta*C,\n\nwhere  alpha and beta are scalars, A is a symmetric matrix and  B and\nC are m by n matrices.'), ('SIDE', "SIDE is CHARACTER*1\n On entry,  SIDE  specifies whether  the  symmetric matrix  A\n appears on the  left or right  in the  operation as follows:\n\n    SIDE = 'L' or 'l'   C := alpha*A*B + beta*C,\n\n    SIDE = 'R' or 'r'   C := alpha*B*A + beta*C,"), ('UPLO', "UPLO is CHARACTER*1\n On  entry,   UPLO  specifies  whether  the  upper  or  lower\n triangular  part  of  the  symmetric  matrix   A  is  to  be\n referenced as follows:\n\n    UPLO = 'U' or 'u'   Only the upper triangular part of the\n                        symmetric matrix is to be referenced.\n\n    UPLO = 'L' or 'l'   Only the lower triangular part of the\n                        symmetric matrix is to be referenced."), ('M', 'M is INTEGER\n On entry,  M  specifies the number of rows of the matrix  C.\n M  must be at least zero.'), ('N', 'N is INTEGER\n On entry, N specifies the number of columns of the matrix C.\n N  must be at least zero.'), ('ALPHA', 'ALPHA is COMPLEX\n On entry, ALPHA specifies the scalar alpha.'), ('A', "A is COMPLEX array of DIMENSION ( LDA, ka ), where ka is\n m  when  SIDE = 'L' or 'l'  and is n  otherwise.\n Before entry  with  SIDE = 'L' or 'l',  the  m by m  part of\n the array  A  must contain the  symmetric matrix,  such that\n when  UPLO = 'U' or 'u', the leading m by m upper triangular\n part of the array  A  must contain the upper triangular part\n of the  symmetric matrix and the  strictly  lower triangular\n part of  A  is not referenced,  and when  UPLO = 'L' or 'l',\n the leading  m by m  lower triangular part  of the  array  A\n must  contain  the  lower triangular part  of the  symmetric\n matrix and the  strictly upper triangular part of  A  is not\n referenced.\n Before entry  with  SIDE = 'R' or 'r',  the  n by n  part of\n the array  A  must contain the  symmetric matrix,  such that\n when  UPLO = 'U' or 'u', the leading n by n upper triangular\n part of the array  A  must contain the upper triangular part\n of the  symmetric matrix and the  strictly  lower triangular\n part of  A  is not referenced,  and when  UPLO = 'L' or 'l',\n the leading  n by n  lower triangular part  of the  array  A\n must  contain  the  lower triangular part  of the  symmetric\n matrix and the  strictly upper triangular part of  A  is not\n referenced."), ('LDA', "LDA is INTEGER\n On entry, LDA specifies the first dimension of A as declared\n in the  calling (sub) program. When  SIDE = 'L' or 'l'  then\n LDA must be at least  max( 1, m ), otherwise  LDA must be at\n least max( 1, n )."), ('B', 'B is COMPLEX array of DIMENSION ( LDB, n ).\n Before entry, the leading  m by n part of the array  B  must\n contain the matrix B.'), ('LDB', 'LDB is INTEGER\n On entry, LDB specifies the first dimension of B as declared\n in  the  calling  (sub)  program.   LDB  must  be  at  least\n max( 1, m ).'), ('BETA', 'BETA is COMPLEX\n On entry,  BETA  specifies the scalar  beta.  When  BETA  is\n supplied as zero then C need not be set on input.'), ('C', 'C is COMPLEX array of DIMENSION ( LDC, n ).\n Before entry, the leading  m by n  part of the array  C must\n contain the matrix  C,  except when  beta  is zero, in which\n case C need not be set on entry.\n On exit, the array  C  is overwritten by the  m by n updated\n matrix.'), ('LDC', 'LDC is INTEGER\n On entry, LDC specifies the first dimension of C as declared\n in  the  calling  (sub)  program.   LDC  must  be  at  least\n max( 1, m ).'))
