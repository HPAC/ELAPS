(('zgelsy', 'ZGELSY computes the minimum-norm solution to a complex linear least\nsquares problem:\n    minimize || A * X - B ||\nusing a complete orthogonal factorization of A.  A is an M-by-N\nmatrix which may be rank-deficient.\n\nSeveral right hand side vectors b and solution vectors x can be\nhandled in a single call; they are stored as the columns of the\nM-by-NRHS right hand side matrix B and the N-by-NRHS solution\nmatrix X.\n\nThe routine first computes a QR factorization with column pivoting:\n    A * P = Q * [ R11 R12 ]\n                [  0  R22 ]\nwith R11 defined as the largest leading submatrix whose estimated\ncondition number is less than 1/RCOND.  The order of R11, RANK,\nis the effective rank of A.\n\nThen, R22 is considered to be negligible, and R12 is annihilated\nby unitary transformations from the right, arriving at the\ncomplete orthogonal factorization:\n   A * P = Q * [ T11 0 ] * Z\n               [  0  0 ]\nThe minimum-norm solution is then\n   X = P * Z**H [ inv(T11)*Q1**H*B ]\n                [        0         ]\nwhere Q1 consists of the first RANK columns of Q.\n\nThis routine is basically identical to the original xGELSX except\nthree differences:\n  o The permutation of matrix B (the right hand side) is faster and\n    more simple.\n  o The call to the subroutine xGEQPF has been substituted by the\n    the call to the subroutine xGEQP3. This subroutine is a Blas-3\n    version of the QR factorization with column pivoting.\n  o Matrix B (the right hand side) is updated with Blas-3.'), ('M', 'M is INTEGER\nThe number of rows of the matrix A.  M >= 0.'), ('N', 'N is INTEGER\nThe number of columns of the matrix A.  N >= 0.'), ('NRHS', 'NRHS is INTEGER\nThe number of right hand sides, i.e., the number of\ncolumns of matrices B and X. NRHS >= 0.'), ('A', 'A is COMPLEX*16 array, dimension (LDA,N)\nOn entry, the M-by-N matrix A.\nOn exit, A has been overwritten by details of its\ncomplete orthogonal factorization.'), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,M).'), ('B', 'B is COMPLEX*16 array, dimension (LDB,NRHS)\nOn entry, the M-by-NRHS right hand side matrix B.\nOn exit, the N-by-NRHS solution matrix X.'), ('LDB', 'LDB is INTEGER\nThe leading dimension of the array B. LDB >= max(1,M,N).'), ('JPVT', 'JPVT is INTEGER array, dimension (N)\nOn entry, if JPVT(i) .ne. 0, the i-th column of A is permuted\nto the front of AP, otherwise column i is a free column.\nOn exit, if JPVT(i) = k, then the i-th column of A*P\nwas the k-th column of A.'), ('RCOND', 'RCOND is DOUBLE PRECISION\nRCOND is used to determine the effective rank of A, which\nis defined as the order of the largest leading triangular\nsubmatrix R11 in the QR factorization with pivoting of A,\nwhose estimated condition number < 1/RCOND.'), ('RANK', 'RANK is INTEGER\nThe effective rank of A, i.e., the order of the submatrix\nR11.  This is the same as the order of the submatrix T11\nin the complete orthogonal factorization of A.'), ('WORK', 'WORK is COMPLEX*16 array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', 'LWORK is INTEGER\nThe dimension of the array WORK.\nThe unblocked strategy requires that:\n  LWORK >= MN + MAX( 2*MN, N+1, MN+NRHS )\nwhere MN = min(M,N).\nThe block algorithm requires that:\n  LWORK >= MN + MAX( 2*MN, NB*(N+1), MN+MN*NB, MN+NB*NRHS )\nwhere NB is an upper bound on the blocksize returned\nby ILAENV for the routines ZGEQP3, ZTZRZF, CTZRQF, ZUNMQR,\nand ZUNMRZ.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal size of the WORK array, returns\nthis value as the first entry of the WORK array, and no error\nmessage related to LWORK is issued by XERBLA.'), ('RWORK', 'RWORK is DOUBLE PRECISION array, dimension (2*N)'), ('INFO', 'INFO is INTEGER\n= 0: successful exit\n< 0: if INFO = -i, the i-th argument had an illegal value'))
