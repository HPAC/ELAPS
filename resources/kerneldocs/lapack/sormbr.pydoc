(('sormbr', "If VECT = 'Q', SORMBR overwrites the general real M-by-N matrix C\nwith\n                SIDE = 'L'     SIDE = 'R'\nTRANS = 'N':      Q * C          C * Q\nTRANS = 'T':      Q**T * C       C * Q**T\n\nIf VECT = 'P', SORMBR overwrites the general real M-by-N matrix C\nwith\n                SIDE = 'L'     SIDE = 'R'\nTRANS = 'N':      P * C          C * P\nTRANS = 'T':      P**T * C       C * P**T\n\nHere Q and P**T are the orthogonal matrices determined by SGEBRD when\nreducing a real matrix A to bidiagonal form: A = Q * B * P**T. Q and\nP**T are defined as products of elementary reflectors H(i) and G(i)\nrespectively.\n\nLet nq = m if SIDE = 'L' and nq = n if SIDE = 'R'. Thus nq is the\norder of the orthogonal matrix Q or P**T that is applied.\n\nIf VECT = 'Q', A is assumed to have been an NQ-by-K matrix:\nif nq >= k, Q = H(1) H(2) . . . H(k);\nif nq < k, Q = H(1) H(2) . . . H(nq-1).\n\nIf VECT = 'P', A is assumed to have been a K-by-NQ matrix:\nif k < nq, P = G(1) G(2) . . . G(k);\nif k >= nq, P = G(1) G(2) . . . G(nq-1)."), ('VECT', "VECT is CHARACTER*1\n= 'Q': apply Q or Q**T;\n= 'P': apply P or P**T."), ('SIDE', "SIDE is CHARACTER*1\n= 'L': apply Q, Q**T, P or P**T from the Left;\n= 'R': apply Q, Q**T, P or P**T from the Right."), ('TRANS', "TRANS is CHARACTER*1\n= 'N':  No transpose, apply Q  or P;\n= 'T':  Transpose, apply Q**T or P**T."), ('M', 'M is INTEGER\nThe number of rows of the matrix C. M >= 0.'), ('N', 'N is INTEGER\nThe number of columns of the matrix C. N >= 0.'), ('K', "K is INTEGER\nIf VECT = 'Q', the number of columns in the original\nmatrix reduced by SGEBRD.\nIf VECT = 'P', the number of rows in the original\nmatrix reduced by SGEBRD.\nK >= 0."), ('A', "A is REAL array, dimension\n                      (LDA,min(nq,K)) if VECT = 'Q'\n                      (LDA,nq)        if VECT = 'P'\nThe vectors which define the elementary reflectors H(i) and\nG(i), whose products determine the matrices Q and P, as\nreturned by SGEBRD."), ('LDA', "LDA is INTEGER\nThe leading dimension of the array A.\nIf VECT = 'Q', LDA >= max(1,nq);\nif VECT = 'P', LDA >= max(1,min(nq,K))."), ('TAU', 'TAU is REAL array, dimension (min(nq,K))\nTAU(i) must contain the scalar factor of the elementary\nreflector H(i) or G(i) which determines Q or P, as returned\nby SGEBRD in the array argument TAUQ or TAUP.'), ('C', 'C is REAL array, dimension (LDC,N)\nOn entry, the M-by-N matrix C.\nOn exit, C is overwritten by Q*C or Q**T*C or C*Q**T or C*Q\nor P*C or P**T*C or C*P or C*P**T.'), ('LDC', 'LDC is INTEGER\nThe leading dimension of the array C. LDC >= max(1,M).'), ('WORK', 'WORK is REAL array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK.\nIf SIDE = 'L', LWORK >= max(1,N);\nif SIDE = 'R', LWORK >= max(1,M).\nFor optimum performance LWORK >= N*NB if SIDE = 'L', and\nLWORK >= M*NB if SIDE = 'R', where NB is the optimal\nblocksize.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal size of the WORK array, returns\nthis value as the first entry of the WORK array, and no error\nmessage related to LWORK is issued by XERBLA."), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value'))
