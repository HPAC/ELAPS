(('slaed1', 'SLAED1 computes the updated eigensystem of a diagonal\nmatrix after modification by a rank-one symmetric matrix.  This\nroutine is used only for the eigenproblem which requires all\neigenvalues and eigenvectors of a tridiagonal matrix.  SLAED7 handles\nthe case in which eigenvalues only or eigenvalues and eigenvectors\nof a full symmetric matrix (which was reduced to tridiagonal form)\nare desired.\n\n  T = Q(in) ( D(in) + RHO * Z*Z**T ) Q**T(in) = Q(out) * D(out) * Q**T(out)\n\n   where Z = Q**T*u, u is a vector of length N with ones in the\n   CUTPNT and CUTPNT + 1 th elements and zeros elsewhere.\n\n   The eigenvectors of the original matrix are stored in Q, and the\n   eigenvalues are in D.  The algorithm consists of three stages:\n\n      The first stage consists of deflating the size of the problem\n      when there are multiple eigenvalues or if there is a zero in\n      the Z vector.  For each such occurence the dimension of the\n      secular equation problem is reduced by one.  This stage is\n      performed by the routine SLAED2.\n\n      The second stage consists of calculating the updated\n      eigenvalues. This is done by finding the roots of the secular\n      equation via the routine SLAED4 (as called by SLAED3).\n      This routine also calculates the eigenvectors of the current\n      problem.\n\n      The final stage consists of computing the updated eigenvectors\n      directly using the updated eigenvalues.  The eigenvectors for\n      the current problem are multiplied with the eigenvectors from\n      the overall problem.'), ('N', 'N is INTEGER\nhe dimension of the symmetric tridiagonal matrix.  N >= 0.'), ('D', 'D is REAL array, dimension (N)\nn entry, the eigenvalues of the rank-1-perturbed matrix.\nn exit, the eigenvalues of the repaired matrix.'), ('Q', 'Q is REAL array, dimension (LDQ,N)\nn entry, the eigenvectors of the rank-1-perturbed matrix.\nn exit, the eigenvectors of the repaired tridiagonal matrix.'), ('LDQ', 'LDQ is INTEGER\nhe leading dimension of the array Q.  LDQ >= max(1,N).'), ('INDXQ', 'INDXQ is INTEGER array, dimension (N)\nn entry, the permutation which separately sorts the two\nubproblems in D into ascending order.\nn exit, the permutation which will reintegrate the\nubproblems back into sorted order,\n.e. D( INDXQ( I = 1, N ) ) will be in ascending order.'), ('RHO', 'RHO is REAL\nhe subdiagonal entry used to create the rank-1 modification.'), ('CUTPNT', 'CUTPNT is INTEGER\nhe location of the last eigenvalue in the leading sub-matrix.\nin(1,N) <= CUTPNT <= N/2.'), ('WORK', 'WORK is REAL array, dimension (4*N + N**2)'), ('IWORK', 'IWORK is INTEGER array, dimension (4*N)'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.\n> 0:  if INFO = 1, an eigenvalue did not converge'))
