(('cgeesx', "CGEESX computes for an N-by-N complex nonsymmetric matrix A, the\neigenvalues, the Schur form T, and, optionally, the matrix of Schur\nvectors Z.  This gives the Schur factorization A = Z*T*(Z**H).\n\nOptionally, it also orders the eigenvalues on the diagonal of the\nSchur form so that selected eigenvalues are at the top left;\ncomputes a reciprocal condition number for the average of the\nselected eigenvalues (RCONDE); and computes a reciprocal condition\nnumber for the right invariant subspace corresponding to the\nselected eigenvalues (RCONDV).  The leading columns of Z form an\northonormal basis for this invariant subspace.\n\nFor further explanation of the reciprocal condition numbers RCONDE\nand RCONDV, see Section 4.10 of the LAPACK Users' Guide (where\nthese quantities are called s and sep respectively).\n\nA complex matrix is in Schur form if it is upper triangular."), ('JOBVS', "JOBVS is CHARACTER*1\n= 'N': Schur vectors are not computed;\n= 'V': Schur vectors are computed."), ('SORT', "SORT is CHARACTER*1\nSpecifies whether or not to order the eigenvalues on the\ndiagonal of the Schur form.\n= 'N': Eigenvalues are not ordered;\n= 'S': Eigenvalues are ordered (see SELECT)."), ('SELECT', "SELECT is procedure) LOGICAL FUNCTION of one COMPLEX argument\nSELECT must be declared EXTERNAL in the calling subroutine.\nIf SORT = 'S', SELECT is used to select eigenvalues to order\nto the top left of the Schur form.\nIf SORT = 'N', SELECT is not referenced.\nAn eigenvalue W(j) is selected if SELECT(W(j)) is true."), ('SENSE', "SENSE is CHARACTER*1\nDetermines which reciprocal condition numbers are computed.\n= 'N': None are computed;\n= 'E': Computed for average of selected eigenvalues only;\n= 'V': Computed for selected right invariant subspace only;\n= 'B': Computed for both.\nIf SENSE = 'E', 'V' or 'B', SORT must equal 'S'."), ('N', 'N is INTEGER\nThe order of the matrix A. N >= 0.'), ('A', 'A is COMPLEX array, dimension (LDA, N)\nOn entry, the N-by-N matrix A.\nOn exit, A is overwritten by its Schur form T.'), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,N).'), ('SDIM', "SDIM is INTEGER\nIf SORT = 'N', SDIM = 0.\nIf SORT = 'S', SDIM = number of eigenvalues for which\n               SELECT is true."), ('W', 'W is COMPLEX array, dimension (N)\nW contains the computed eigenvalues, in the same order\nthat they appear on the diagonal of the output Schur form T.'), ('VS', "VS is COMPLEX array, dimension (LDVS,N)\nIf JOBVS = 'V', VS contains the unitary matrix Z of Schur\nvectors.\nIf JOBVS = 'N', VS is not referenced."), ('LDVS', "LDVS is INTEGER\nThe leading dimension of the array VS.  LDVS >= 1, and if\nJOBVS = 'V', LDVS >= N."), ('RCONDE', "RCONDE is REAL\nIf SENSE = 'E' or 'B', RCONDE contains the reciprocal\ncondition number for the average of the selected eigenvalues.\nNot referenced if SENSE = 'N' or 'V'."), ('RCONDV', "RCONDV is REAL\nIf SENSE = 'V' or 'B', RCONDV contains the reciprocal\ncondition number for the selected right invariant subspace.\nNot referenced if SENSE = 'N' or 'E'."), ('WORK', 'WORK is COMPLEX array, dimension (MAX(1,LWORK))\nOn exit, if INFO = 0, WORK(1) returns the optimal LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK.  LWORK >= max(1,2*N).\nAlso, if SENSE = 'E' or 'V' or 'B', LWORK >= 2*SDIM*(N-SDIM),\nwhere SDIM is the number of selected eigenvalues computed by\nthis routine.  Note that 2*SDIM*(N-SDIM) <= N*N/2. Note also\nthat an error is only returned if LWORK < max(1,2*N), but if\nSENSE = 'E' or 'V' or 'B' this may not be large enough.\nFor good performance, LWORK must generally be larger.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates upper bound on the optimal size of the\narray WORK, returns this value as the first entry of the WORK\narray, and no error message related to LWORK is issued by\nXERBLA."), ('RWORK', 'RWORK is REAL array, dimension (N)'), ('BWORK', "BWORK is LOGICAL array, dimension (N)\nNot referenced if SORT = 'N'."), ('INFO', "INFO is INTEGER\n= 0: successful exit\n< 0: if INFO = -i, the i-th argument had an illegal value.\n> 0: if INFO = i, and i is\n   <= N: the QR algorithm failed to compute all the\n         eigenvalues; elements 1:ILO-1 and i+1:N of W\n         contain those eigenvalues which have converged; if\n         JOBVS = 'V', VS contains the transformation which\n         reduces A to its partially converged Schur form.\n   = N+1: the eigenvalues could not be reordered because some\n         eigenvalues were too close to separate (the problem\n         is very ill-conditioned);\n   = N+2: after reordering, roundoff changed values of some\n         complex eigenvalues so that leading eigenvalues in\n         the Schur form no longer satisfy SELECT=.TRUE.  This\n         could also be caused by underflow due to scaling."))
