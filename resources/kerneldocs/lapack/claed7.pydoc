(('claed7', 'CLAED7 computes the updated eigensystem of a diagonal\nmatrix after modification by a rank-one symmetric matrix. This\nroutine is used only for the eigenproblem which requires all\neigenvalues and optionally eigenvectors of a dense or banded\nHermitian matrix that has been reduced to tridiagonal form.\n\n  T = Q(in) ( D(in) + RHO * Z*Z**H ) Q**H(in) = Q(out) * D(out) * Q**H(out)\n\n  where Z = Q**Hu, u is a vector of length N with ones in the\n  CUTPNT and CUTPNT + 1 th elements and zeros elsewhere.\n\n   The eigenvectors of the original matrix are stored in Q, and the\n   eigenvalues are in D.  The algorithm consists of three stages:\n\n      The first stage consists of deflating the size of the problem\n      when there are multiple eigenvalues or if there is a zero in\n      the Z vector.  For each such occurence the dimension of the\n      secular equation problem is reduced by one.  This stage is\n      performed by the routine SLAED2.\n\n      The second stage consists of calculating the updated\n      eigenvalues. This is done by finding the roots of the secular\n      equation via the routine SLAED4 (as called by SLAED3).\n      This routine also calculates the eigenvectors of the current\n      problem.\n\n      The final stage consists of computing the updated eigenvectors\n      directly using the updated eigenvalues.  The eigenvectors for\n      the current problem are multiplied with the eigenvectors from\n      the overall problem.'), ('N', 'N is INTEGER\nhe dimension of the symmetric tridiagonal matrix.  N >= 0.'), ('CUTPNT', 'CUTPNT is INTEGER\nontains the location of the last eigenvalue in the leading\nub-matrix.  min(1,N) <= CUTPNT <= N.'), ('QSIZ', 'QSIZ is INTEGER\nhe dimension of the unitary matrix used to reduce\nhe full matrix to tridiagonal form.  QSIZ >= N.'), ('TLVLS', 'TLVLS is INTEGER\nhe total number of merging levels in the overall divide and\nonquer tree.'), ('CURLVL', 'CURLVL is INTEGER\nhe current level in the overall merge routine,\n <= curlvl <= tlvls.'), ('CURPBM', 'CURPBM is INTEGER\nhe current problem in the current level in the overall\nerge routine (counting from upper left to lower right).'), ('D', 'D is REAL array, dimension (N)\nn entry, the eigenvalues of the rank-1-perturbed matrix.\nn exit, the eigenvalues of the repaired matrix.'), ('Q', 'Q is COMPLEX array, dimension (LDQ,N)\nn entry, the eigenvectors of the rank-1-perturbed matrix.\nn exit, the eigenvectors of the repaired tridiagonal matrix.'), ('LDQ', 'LDQ is INTEGER\nhe leading dimension of the array Q.  LDQ >= max(1,N).'), ('RHO', 'RHO is REAL\nontains the subdiagonal element used to create the rank-1\nodification.'), ('INDXQ', 'INDXQ is INTEGER array, dimension (N)\nhis contains the permutation which will reintegrate the\nubproblem just solved back into sorted order,\ne. D( INDXQ( I = 1, N ) ) will be in ascending order.'), ('IWORK', 'IWORK is INTEGER array, dimension (4*N)'), ('RWORK', 'RWORK is REAL array,\n                       dimension (3*N+2*QSIZ*N)'), ('WORK', 'WORK is COMPLEX array, dimension (QSIZ*N)'), ('QSTORE', 'QSTORE is REAL array, dimension (N**2+1)\ntores eigenvectors of submatrices encountered during\nivide and conquer, packed together. QPTR points to\neginning of the submatrices.'), ('QPTR', 'QPTR is INTEGER array, dimension (N+2)\nist of indices pointing to beginning of submatrices stored\nn QSTORE. The submatrices are numbered starting at the\nottom left of the divide and conquer tree, from left to\night and bottom to top.'), ('PRMPTR', "PRMPTR is INTEGER array, dimension (N lg N)\nontains a list of pointers which indicate where in PERM a\nevel's permutation is stored.  PRMPTR(i+1) - PRMPTR(i)\nndicates the size of the permutation and also the size of\nhe full, non-deflated problem."), ('PERM', 'PERM is INTEGER array, dimension (N lg N)\nontains the permutations (from deflation and sorting) to be\npplied to each eigenblock.'), ('GIVPTR', "GIVPTR is INTEGER array, dimension (N lg N)\nontains a list of pointers which indicate where in GIVCOL a\nevel's Givens rotations are stored.  GIVPTR(i+1) - GIVPTR(i)\nndicates the number of Givens rotations."), ('GIVCOL', 'GIVCOL is INTEGER array, dimension (2, N lg N)\nach pair of numbers indicates a pair of columns to take place\nn a Givens rotation.'), ('GIVNUM', 'GIVNUM is REAL array, dimension (2, N lg N)\nach number indicates the S value to be used in the\norresponding Givens rotation.'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.\n> 0:  if INFO = 1, an eigenvalue did not converge'))
