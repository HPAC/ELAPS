(('chbgvd', 'CHBGVD computes all the eigenvalues, and optionally, the eigenvectors\nof a complex generalized Hermitian-definite banded eigenproblem, of\nthe form A*x=(lambda)*B*x. Here A and B are assumed to be Hermitian\nand banded, and B is also positive definite.  If eigenvectors are\ndesired, it uses a divide and conquer algorithm.\n\nThe divide and conquer algorithm makes very mild assumptions about\nfloating point arithmetic. It will work on machines with a guard\ndigit in add/subtract, or on those binary machines without guard\ndigits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\nCray-2. It could conceivably fail on hexadecimal or decimal machines\nwithout guard digits, but we know of none.'), ('JOBZ', "JOBZ is CHARACTER*1\n= 'N':  Compute eigenvalues only;\n= 'V':  Compute eigenvalues and eigenvectors."), ('UPLO', "UPLO is CHARACTER*1\n= 'U':  Upper triangles of A and B are stored;\n= 'L':  Lower triangles of A and B are stored."), ('N', 'N is INTEGER\nThe order of the matrices A and B.  N >= 0.'), ('KA', "KA is INTEGER\nThe number of superdiagonals of the matrix A if UPLO = 'U',\nor the number of subdiagonals if UPLO = 'L'. KA >= 0."), ('KB', "KB is INTEGER\nThe number of superdiagonals of the matrix B if UPLO = 'U',\nor the number of subdiagonals if UPLO = 'L'. KB >= 0."), ('AB', "AB is COMPLEX array, dimension (LDAB, N)\nOn entry, the upper or lower triangle of the Hermitian band\nmatrix A, stored in the first ka+1 rows of the array.  The\nj-th column of A is stored in the j-th column of the array AB\nas follows:\nif UPLO = 'U', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\nif UPLO = 'L', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n\nOn exit, the contents of AB are destroyed."), ('LDAB', 'LDAB is INTEGER\nThe leading dimension of the array AB.  LDAB >= KA+1.'), ('BB', "BB is COMPLEX array, dimension (LDBB, N)\nOn entry, the upper or lower triangle of the Hermitian band\nmatrix B, stored in the first kb+1 rows of the array.  The\nj-th column of B is stored in the j-th column of the array BB\nas follows:\nif UPLO = 'U', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\nif UPLO = 'L', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n\nOn exit, the factor S from the split Cholesky factorization\nB = S**H*S, as returned by CPBSTF."), ('LDBB', 'LDBB is INTEGER\nThe leading dimension of the array BB.  LDBB >= KB+1.'), ('W', 'W is REAL array, dimension (N)\nIf INFO = 0, the eigenvalues in ascending order.'), ('Z', "Z is COMPLEX array, dimension (LDZ, N)\nIf JOBZ = 'V', then if INFO = 0, Z contains the matrix Z of\neigenvectors, with the i-th column of Z holding the\neigenvector associated with W(i). The eigenvectors are\nnormalized so that Z**H*B*Z = I.\nIf JOBZ = 'N', then Z is not referenced."), ('LDZ', "LDZ is INTEGER\nThe leading dimension of the array Z.  LDZ >= 1, and if\nJOBZ = 'V', LDZ >= N."), ('WORK', 'WORK is COMPLEX array, dimension (MAX(1,LWORK))\nOn exit, if INFO=0, WORK(1) returns the optimal LWORK.'), ('LWORK', "LWORK is INTEGER\nThe dimension of the array WORK.\nIf N <= 1,               LWORK >= 1.\nIf JOBZ = 'N' and N > 1, LWORK >= N.\nIf JOBZ = 'V' and N > 1, LWORK >= 2*N**2.\n\nIf LWORK = -1, then a workspace query is assumed; the routine\nonly calculates the optimal sizes of the WORK, RWORK and\nIWORK arrays, returns these values as the first entries of\nthe WORK, RWORK and IWORK arrays, and no error message\nrelated to LWORK or LRWORK or LIWORK is issued by XERBLA."), ('RWORK', 'RWORK is REAL array, dimension (MAX(1,LRWORK))\nOn exit, if INFO=0, RWORK(1) returns the optimal LRWORK.'), ('LRWORK', "LRWORK is INTEGER\nThe dimension of array RWORK.\nIf N <= 1,               LRWORK >= 1.\nIf JOBZ = 'N' and N > 1, LRWORK >= N.\nIf JOBZ = 'V' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.\n\nIf LRWORK = -1, then a workspace query is assumed; the\nroutine only calculates the optimal sizes of the WORK, RWORK\nand IWORK arrays, returns these values as the first entries\nof the WORK, RWORK and IWORK arrays, and no error message\nrelated to LWORK or LRWORK or LIWORK is issued by XERBLA."), ('IWORK', 'IWORK is INTEGER array, dimension (MAX(1,LIWORK))\nOn exit, if INFO=0, IWORK(1) returns the optimal LIWORK.'), ('LIWORK', "LIWORK is INTEGER\nThe dimension of array IWORK.\nIf JOBZ = 'N' or N <= 1, LIWORK >= 1.\nIf JOBZ = 'V' and N > 1, LIWORK >= 3 + 5*N.\n\nIf LIWORK = -1, then a workspace query is assumed; the\nroutine only calculates the optimal sizes of the WORK, RWORK\nand IWORK arrays, returns these values as the first entries\nof the WORK, RWORK and IWORK arrays, and no error message\nrelated to LWORK or LRWORK or LIWORK is issued by XERBLA."), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  if INFO = i, and i is:\n   <= N:  the algorithm failed to converge:\n          i off-diagonal elements of an intermediate\n          tridiagonal form did not converge to zero;\n   > N:   if INFO = N + i, for 1 <= i <= N, then CPBSTF\n          returned INFO = i: B is not positive definite.\n          The factorization of B could not be completed and\n          no eigenvalues or eigenvectors were computed.'))
