(('zhsein', 'ZHSEIN uses inverse iteration to find specified right and/or left\neigenvectors of a complex upper Hessenberg matrix H.\n\nThe right eigenvector x and the left eigenvector y of the matrix H\ncorresponding to an eigenvalue w are defined by:\n\n             H * x = w * x,     y**h * H = w * y**h\n\nwhere y**h denotes the conjugate transpose of the vector y.'), ('SIDE', "SIDE is CHARACTER*1\n= 'R': compute right eigenvectors only;\n= 'L': compute left eigenvectors only;\n= 'B': compute both right and left eigenvectors."), ('EIGSRC', "EIGSRC is CHARACTER*1\nSpecifies the source of eigenvalues supplied in W:\n= 'Q': the eigenvalues were found using ZHSEQR; thus, if\n       H has zero subdiagonal elements, and so is\n       block-triangular, then the j-th eigenvalue can be\n       assumed to be an eigenvalue of the block containing\n       the j-th row/column.  This property allows ZHSEIN to\n       perform inverse iteration on just one diagonal block.\n= 'N': no assumptions are made on the correspondence\n       between eigenvalues and diagonal blocks.  In this\n       case, ZHSEIN must always perform inverse iteration\n       using the whole matrix H."), ('INITV', "INITV is CHARACTER*1\n= 'N': no initial vectors are supplied;\n= 'U': user-supplied initial vectors are stored in the arrays\n       VL and/or VR."), ('SELECT', 'SELECT is LOGICAL array, dimension (N)\nSpecifies the eigenvectors to be computed. To select the\neigenvector corresponding to the eigenvalue W(j),\nSELECT(j) must be set to .TRUE..'), ('N', 'N is INTEGER\nThe order of the matrix H.  N >= 0.'), ('H', 'H is COMPLEX*16 array, dimension (LDH,N)\nThe upper Hessenberg matrix H.\nIf a NaN is detected in H, the routine will return with INFO=-6.'), ('LDH', 'LDH is INTEGER\nThe leading dimension of the array H.  LDH >= max(1,N).'), ('W', 'W is COMPLEX*16 array, dimension (N)\nOn entry, the eigenvalues of H.\nOn exit, the real parts of W may have been altered since\nclose eigenvalues are perturbed slightly in searching for\nindependent eigenvectors.'), ('VL', "VL is COMPLEX*16 array, dimension (LDVL,MM)\nOn entry, if INITV = 'U' and SIDE = 'L' or 'B', VL must\ncontain starting vectors for the inverse iteration for the\nleft eigenvectors; the starting vector for each eigenvector\nmust be in the same column in which the eigenvector will be\nstored.\nOn exit, if SIDE = 'L' or 'B', the left eigenvectors\nspecified by SELECT will be stored consecutively in the\ncolumns of VL, in the same order as their eigenvalues.\nIf SIDE = 'R', VL is not referenced."), ('LDVL', "LDVL is INTEGER\nThe leading dimension of the array VL.\nLDVL >= max(1,N) if SIDE = 'L' or 'B'; LDVL >= 1 otherwise."), ('VR', "VR is COMPLEX*16 array, dimension (LDVR,MM)\nOn entry, if INITV = 'U' and SIDE = 'R' or 'B', VR must\ncontain starting vectors for the inverse iteration for the\nright eigenvectors; the starting vector for each eigenvector\nmust be in the same column in which the eigenvector will be\nstored.\nOn exit, if SIDE = 'R' or 'B', the right eigenvectors\nspecified by SELECT will be stored consecutively in the\ncolumns of VR, in the same order as their eigenvalues.\nIf SIDE = 'L', VR is not referenced."), ('LDVR', "LDVR is INTEGER\nThe leading dimension of the array VR.\nLDVR >= max(1,N) if SIDE = 'R' or 'B'; LDVR >= 1 otherwise."), ('MM', 'MM is INTEGER\nThe number of columns in the arrays VL and/or VR. MM >= M.'), ('M', 'M is INTEGER\nThe number of columns in the arrays VL and/or VR required to\nstore the eigenvectors (= the number of .TRUE. elements in\nSELECT).'), ('WORK', 'WORK is COMPLEX*16 array, dimension (N*N)'), ('RWORK', 'RWORK is DOUBLE PRECISION array, dimension (N)'), ('IFAILL', "IFAILL is INTEGER array, dimension (MM)\nIf SIDE = 'L' or 'B', IFAILL(i) = j > 0 if the left\neigenvector in the i-th column of VL (corresponding to the\neigenvalue w(j)) failed to converge; IFAILL(i) = 0 if the\neigenvector converged satisfactorily.\nIf SIDE = 'R', IFAILL is not referenced."), ('IFAILR', "IFAILR is INTEGER array, dimension (MM)\nIf SIDE = 'R' or 'B', IFAILR(i) = j > 0 if the right\neigenvector in the i-th column of VR (corresponding to the\neigenvalue w(j)) failed to converge; IFAILR(i) = 0 if the\neigenvector converged satisfactorily.\nIf SIDE = 'L', IFAILR is not referenced."), ('INFO', 'INFO is INTEGER\n= 0:  successful exit\n< 0:  if INFO = -i, the i-th argument had an illegal value\n> 0:  if INFO = i, i is the number of eigenvectors which\n      failed to converge; see IFAILL and IFAILR for further\n      details.'))
