(('ztgex2', 'ZTGEX2 swaps adjacent diagonal 1 by 1 blocks (A11,B11) and (A22,B22)\nin an upper triangular matrix pair (A, B) by an unitary equivalence\ntransformation.\n\n(A, B) must be in generalized Schur canonical form, that is, A and\nB are both upper triangular.\n\nOptionally, the matrices Q and Z of generalized Schur vectors are\nupdated.\n\n       Q(in) * A(in) * Z(in)**H = Q(out) * A(out) * Z(out)**H\n       Q(in) * B(in) * Z(in)**H = Q(out) * B(out) * Z(out)**H'), ('WANTQ', 'WANTQ is LOGICAL\n.TRUE. : update the left transformation matrix Q;\n.FALSE.: do not update Q.'), ('WANTZ', 'WANTZ is LOGICAL\n.TRUE. : update the right transformation matrix Z;\n.FALSE.: do not update Z.'), ('N', 'N is INTEGER\nThe order of the matrices A and B. N >= 0.'), ('A', 'A is COMPLEX*16 arrays, dimensions (LDA,N)\nOn entry, the matrix A in the pair (A, B).\nOn exit, the updated matrix A.'), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A. LDA >= max(1,N).'), ('B', 'B is COMPLEX*16 arrays, dimensions (LDB,N)\nOn entry, the matrix B in the pair (A, B).\nOn exit, the updated matrix B.'), ('LDB', 'LDB is INTEGER\nThe leading dimension of the array B. LDB >= max(1,N).'), ('Q', 'Q is COMPLEX*16 array, dimension (LDZ,N)\nIf WANTQ = .TRUE, on entry, the unitary matrix Q. On exit,\nthe updated matrix Q.\nNot referenced if WANTQ = .FALSE..'), ('LDQ', 'LDQ is INTEGER\nThe leading dimension of the array Q. LDQ >= 1;\nIf WANTQ = .TRUE., LDQ >= N.'), ('Z', 'Z is COMPLEX*16 array, dimension (LDZ,N)\nIf WANTZ = .TRUE, on entry, the unitary matrix Z. On exit,\nthe updated matrix Z.\nNot referenced if WANTZ = .FALSE..'), ('LDZ', 'LDZ is INTEGER\nThe leading dimension of the array Z. LDZ >= 1;\nIf WANTZ = .TRUE., LDZ >= N.'), ('J1', 'J1 is INTEGER\nThe index to the first block (A11, B11).'), ('INFO', 'INFO is INTEGER\n =0:  Successful exit.\n =1:  The transformed matrix pair (A, B) would be too far\n      from generalized Schur form; the problem is ill-\n      conditioned. '))
