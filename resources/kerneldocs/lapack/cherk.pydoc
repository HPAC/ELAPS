(('cherk', 'CHERK  performs one of the hermitian rank k operations\n\n   C := alpha*A*A**H + beta*C,\n\nor\n\n   C := alpha*A**H*A + beta*C,\n\nwhere  alpha and beta  are  real scalars,  C is an  n by n  hermitian\nmatrix and  A  is an  n by k  matrix in the  first case and a  k by n\nmatrix in the second case.'), ('UPLO', "UPLO is CHARACTER*1\n On  entry,   UPLO  specifies  whether  the  upper  or  lower\n triangular  part  of the  array  C  is to be  referenced  as\n follows:\n\n    UPLO = 'U' or 'u'   Only the  upper triangular part of  C\n                        is to be referenced.\n\n    UPLO = 'L' or 'l'   Only the  lower triangular part of  C\n                        is to be referenced."), ('TRANS', "TRANS is CHARACTER*1\n On entry,  TRANS  specifies the operation to be performed as\n follows:\n\n    TRANS = 'N' or 'n'   C := alpha*A*A**H + beta*C.\n\n    TRANS = 'C' or 'c'   C := alpha*A**H*A + beta*C."), ('N', 'N is INTEGER\n On entry,  N specifies the order of the matrix C.  N must be\n at least zero.'), ('K', "K is INTEGER\n On entry with  TRANS = 'N' or 'n',  K  specifies  the number\n of  columns   of  the   matrix   A,   and  on   entry   with\n TRANS = 'C' or 'c',  K  specifies  the number of rows of the\n matrix A.  K must be at least zero."), ('ALPHA', 'ALPHA is REAL\n On entry, ALPHA specifies the scalar alpha.'), ('A', "A is COMPLEX array of DIMENSION ( LDA, ka ), where ka is\n k  when  TRANS = 'N' or 'n',  and is  n  otherwise.\n Before entry with  TRANS = 'N' or 'n',  the  leading  n by k\n part of the array  A  must contain the matrix  A,  otherwise\n the leading  k by n  part of the array  A  must contain  the\n matrix A."), ('LDA', "LDA is INTEGER\n On entry, LDA specifies the first dimension of A as declared\n in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'\n then  LDA must be at least  max( 1, n ), otherwise  LDA must\n be at least  max( 1, k )."), ('BETA', 'BETA is REAL\n On entry, BETA specifies the scalar beta.'), ('C', "C is COMPLEX array of DIMENSION ( LDC, n ).\n Before entry  with  UPLO = 'U' or 'u',  the leading  n by n\n upper triangular part of the array C must contain the upper\n triangular part  of the  hermitian matrix  and the strictly\n lower triangular part of C is not referenced.  On exit, the\n upper triangular part of the array  C is overwritten by the\n upper triangular part of the updated matrix.\n Before entry  with  UPLO = 'L' or 'l',  the leading  n by n\n lower triangular part of the array C must contain the lower\n triangular part  of the  hermitian matrix  and the strictly\n upper triangular part of C is not referenced.  On exit, the\n lower triangular part of the array  C is overwritten by the\n lower triangular part of the updated matrix.\n Note that the imaginary parts of the diagonal elements need\n not be set,  they are assumed to be zero,  and on exit they\n are set to zero."), ('LDC', 'LDC is INTEGER\n On entry, LDC specifies the first dimension of C as declared\n in  the  calling  (sub)  program.   LDC  must  be  at  least\n max( 1, n ).'))
