(('slalsa', 'SLALSA is an itermediate step in solving the least squares problem\nby computing the SVD of the coefficient matrix in compact form (The\nsingular vectors are computed as products of simple orthorgonal\nmatrices.).\n\nIf ICOMPQ = 0, SLALSA applies the inverse of the left singular vector\nmatrix of an upper bidiagonal matrix to the right hand side; and if\nICOMPQ = 1, SLALSA applies the right singular vector matrix to the\nright hand side. The singular vector matrices were generated in\ncompact form by SLALSA.'), ('ICOMPQ', 'ICOMPQ is INTEGER\npecifies whether the left or the right singular vector\natrix is involved.\n 0: Left singular vector matrix\n 1: Right singular vector matrix'), ('SMLSIZ', 'SMLSIZ is INTEGER\nhe maximum size of the subproblems at the bottom of the\nomputation tree.'), ('N', 'N is INTEGER\nhe row and column dimensions of the upper bidiagonal matrix.'), ('NRHS', 'NRHS is INTEGER\nhe number of columns of B and BX. NRHS must be at least 1.'), ('B', 'B is REAL array, dimension ( LDB, NRHS )\nn input, B contains the right hand sides of the least\nquares problem in rows 1 through M.\nn output, B contains the solution X in rows 1 through N.'), ('LDB', 'LDB is INTEGER\nhe leading dimension of B in the calling subprogram.\nDB must be at least max(1,MAX( M, N ) ).'), ('BX', 'BX is REAL array, dimension ( LDBX, NRHS )\nn exit, the result of applying the left or right singular\nector matrix to B.'), ('LDBX', 'LDBX is INTEGER\nhe leading dimension of BX.'), ('U', 'U is REAL array, dimension ( LDU, SMLSIZ ).\nn entry, U contains the left singular vector matrices of all\nubproblems at the bottom level.'), ('LDU', 'LDU is INTEGER, LDU = > N.\nhe leading dimension of arrays U, VT, DIFL, DIFR,\nOLES, GIVNUM, and Z.'), ('VT', 'VT is REAL array, dimension ( LDU, SMLSIZ+1 ).\nn entry, VT**T contains the right singular vector matrices of\nll subproblems at the bottom level.'), ('K', 'K is INTEGER array, dimension ( N ).'), ('DIFL', 'DIFL is REAL array, dimension ( LDU, NLVL ).\nhere NLVL = INT(log_2 (N/(SMLSIZ+1))) + 1.'), ('DIFR', 'DIFR is REAL array, dimension ( LDU, 2 * NLVL ).\nn entry, DIFL(*, I) and DIFR(*, 2 * I -1) record\nistances between singular values on the I-th level and\ningular values on the (I -1)-th level, and DIFR(*, 2 * I)\necord the normalizing factors of the right singular vectors\natrices of subproblems on I-th level.'), ('Z', 'Z is REAL array, dimension ( LDU, NLVL ).\nn entry, Z(1, I) contains the components of the deflation-\ndjusted updating row vector for subproblems on the I-th\nevel.'), ('POLES', 'POLES is REAL array, dimension ( LDU, 2 * NLVL ).\nn entry, POLES(*, 2 * I -1: 2 * I) contains the new and old\ningular values involved in the secular equations on the I-th\nevel.'), ('GIVPTR', 'GIVPTR is INTEGER array, dimension ( N ).\nn entry, GIVPTR( I ) records the number of Givens\notations performed on the I-th problem on the computation\nree.'), ('GIVCOL', 'GIVCOL is INTEGER array, dimension ( LDGCOL, 2 * NLVL ).\nn entry, for each I, GIVCOL(*, 2 * I - 1: 2 * I) records the\nocations of Givens rotations performed on the I-th level on\nhe computation tree.'), ('LDGCOL', 'LDGCOL is INTEGER, LDGCOL = > N.\nhe leading dimension of arrays GIVCOL and PERM.'), ('PERM', 'PERM is INTEGER array, dimension ( LDGCOL, NLVL ).\nn entry, PERM(*, I) records permutations done on the I-th\nevel of the computation tree.'), ('GIVNUM', 'GIVNUM is REAL array, dimension ( LDU, 2 * NLVL ).\nn entry, GIVNUM(*, 2 *I -1 : 2 * I) records the C- and S-\nalues of Givens rotations performed on the I-th level on the\nomputation tree.'), ('C', 'C is REAL array, dimension ( N ).\nn entry, if the I-th subproblem is not square,\n( I ) contains the C-value of a Givens rotation related to\nhe right null space of the I-th subproblem.'), ('S', 'S is REAL array, dimension ( N ).\nn entry, if the I-th subproblem is not square,\n( I ) contains the S-value of a Givens rotation related to\nhe right null space of the I-th subproblem.'), ('WORK', 'WORK is REAL array.\nhe dimension must be at least N.'), ('IWORK', 'IWORK is INTEGER array.\nhe dimension must be at least 3 * N'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.'))
