(('clasr', "CLASR applies a sequence of real plane rotations to a complex matrix\nA, from either the left or the right.\n\nWhen SIDE = 'L', the transformation takes the form\n\n   A := P*A\n\nand when SIDE = 'R', the transformation takes the form\n\n   A := A*P**T\n\nwhere P is an orthogonal matrix consisting of a sequence of z plane\nrotations, with z = M when SIDE = 'L' and z = N when SIDE = 'R',\nand P**T is the transpose of P.\n\nWhen DIRECT = 'F' (Forward sequence), then\n\n   P = P(z-1) * ... * P(2) * P(1)\n\nand when DIRECT = 'B' (Backward sequence), then\n\n   P = P(1) * P(2) * ... * P(z-1)\n\nwhere P(k) is a plane rotation matrix defined by the 2-by-2 rotation\n\n   R(k) = (  c(k)  s(k) )\n        = ( -s(k)  c(k) ).\n\nWhen PIVOT = 'V' (Variable pivot), the rotation is performed\nfor the plane (k,k+1), i.e., P(k) has the form\n\n   P(k) = (  1                                            )\n          (       ...                                     )\n          (              1                                )\n          (                   c(k)  s(k)                  )\n          (                  -s(k)  c(k)                  )\n          (                                1              )\n          (                                     ...       )\n          (                                            1  )\n\nwhere R(k) appears as a rank-2 modification to the identity matrix in\nrows and columns k and k+1.\n\nWhen PIVOT = 'T' (Top pivot), the rotation is performed for the\nplane (1,k+1), so P(k) has the form\n\n   P(k) = (  c(k)                    s(k)                 )\n          (         1                                     )\n          (              ...                              )\n          (                     1                         )\n          ( -s(k)                    c(k)                 )\n          (                                 1             )\n          (                                      ...      )\n          (                                             1 )\n\nwhere R(k) appears in rows and columns 1 and k+1.\n\nSimilarly, when PIVOT = 'B' (Bottom pivot), the rotation is\nperformed for the plane (k,z), giving P(k) the form\n\n   P(k) = ( 1                                             )\n          (      ...                                      )\n          (             1                                 )\n          (                  c(k)                    s(k) )\n          (                         1                     )\n          (                              ...              )\n          (                                     1         )\n          (                 -s(k)                    c(k) )\n\nwhere R(k) appears in rows and columns k and z.  The rotations are\nperformed without ever forming P(k) explicitly."), ('SIDE', "SIDE is CHARACTER*1\nSpecifies whether the plane rotation matrix P is applied to\nA on the left or the right.\n= 'L':  Left, compute A := P*A\n= 'R':  Right, compute A:= A*P**T"), ('PIVOT', "PIVOT is CHARACTER*1\nSpecifies the plane for which P(k) is a plane rotation\nmatrix.\n= 'V':  Variable pivot, the plane (k,k+1)\n= 'T':  Top pivot, the plane (1,k+1)\n= 'B':  Bottom pivot, the plane (k,z)"), ('DIRECT', "DIRECT is CHARACTER*1\nSpecifies whether P is a forward or backward sequence of\nplane rotations.\n= 'F':  Forward, P = P(z-1)*...*P(2)*P(1)\n= 'B':  Backward, P = P(1)*P(2)*...*P(z-1)"), ('M', 'M is INTEGER\nThe number of rows of the matrix A.  If m <= 1, an immediate\nreturn is effected.'), ('N', 'N is INTEGER\nThe number of columns of the matrix A.  If n <= 1, an\nimmediate return is effected.'), ('C', "C is REAL array, dimension\n        (M-1) if SIDE = 'L'\n        (N-1) if SIDE = 'R'\nThe cosines c(k) of the plane rotations."), ('S', "S is REAL array, dimension\n        (M-1) if SIDE = 'L'\n        (N-1) if SIDE = 'R'\nThe sines s(k) of the plane rotations.  The 2-by-2 plane\nrotation part of the matrix P(k), R(k), has the form\nR(k) = (  c(k)  s(k) )\n       ( -s(k)  c(k) )."), ('A', "A is COMPLEX array, dimension (LDA,N)\nThe M-by-N matrix A.  On exit, A is overwritten by P*A if\nSIDE = 'R' or by A*P**T if SIDE = 'L'."), ('LDA', 'LDA is INTEGER\nThe leading dimension of the array A.  LDA >= max(1,M).'))
