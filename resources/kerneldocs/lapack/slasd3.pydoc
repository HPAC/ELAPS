(('slasd3', 'SLASD3 finds all the square roots of the roots of the secular\nequation, as defined by the values in D and Z.  It makes the\nappropriate calls to SLASD4 and then updates the singular\nvectors by matrix multiplication.\n\nThis code makes very mild assumptions about floating point\narithmetic. It will work on machines with a guard digit in\nadd/subtract, or on those binary machines without guard digits\nwhich subtract like the Cray XMP, Cray YMP, Cray C 90, or Cray 2.\nIt could conceivably fail on hexadecimal or decimal machines\nwithout guard digits, but we know of none.\n\nSLASD3 is called from SLASD1.'), ('NL', 'NL is INTEGER\nhe row dimension of the upper block.  NL >= 1.'), ('NR', 'NR is INTEGER\nhe row dimension of the lower block.  NR >= 1.'), ('SQRE', 'SQRE is INTEGER\n 0: the lower block is an NR-by-NR square matrix.\n 1: the lower block is an NR-by-(NR+1) rectangular matrix.\n\nhe bidiagonal matrix has N = NL + NR + 1 rows and\n = N + SQRE >= N columns.'), ('K', 'K is INTEGER\nhe size of the secular equation, 1 =< K = < N.'), ('D', 'D is REAL array, dimension(K)\nn exit the square roots of the roots of the secular equation,\nn ascending order.'), ('Q', 'Q is REAL array,\n           dimension at least (LDQ,K).'), ('LDQ', 'LDQ is INTEGER\nhe leading dimension of the array Q.  LDQ >= K.'), ('DSIGMA', 'DSIGMA is REAL array, dimension(K)\nhe first K elements of this array contain the old roots\nf the deflated updating problem.  These are the poles\nf the secular equation.'), ('U', 'U is REAL array, dimension (LDU, N)\nhe last N - K columns of this matrix contain the deflated\neft singular vectors.'), ('LDU', 'LDU is INTEGER\nhe leading dimension of the array U.  LDU >= N.'), ('U2', 'U2 is REAL array, dimension (LDU2, N)\nhe first K columns of this matrix contain the non-deflated\neft singular vectors for the split problem.'), ('LDU2', 'LDU2 is INTEGER\nhe leading dimension of the array U2.  LDU2 >= N.'), ('VT', 'VT is REAL array, dimension (LDVT, M)\nhe last M - K columns of VT**T contain the deflated\night singular vectors.'), ('LDVT', 'LDVT is INTEGER\nhe leading dimension of the array VT.  LDVT >= N.'), ('VT2', 'VT2 is REAL array, dimension (LDVT2, N)\nhe first K columns of VT2**T contain the non-deflated\night singular vectors for the split problem.'), ('LDVT2', 'LDVT2 is INTEGER\nhe leading dimension of the array VT2.  LDVT2 >= N.'), ('IDXC', 'IDXC is INTEGER array, dimension (N)\nhe permutation used to arrange the columns of U (and rows of\nT) into three groups:  the first group contains non-zero\nntries only at and above (or before) NL +1; the second\nontains non-zero entries only at and below (or after) NL+2;\nnd the third is dense. The first column of U and the row of\nT are treated separately, however.\n\nhe rows of the singular vectors found by SLASD4\nust be likewise permuted before the matrix multiplies can\nake place.'), ('CTOT', 'CTOT is INTEGER array, dimension (4)\n count of the total number of the various types of columns\nn U (or rows in VT), as described in IDXC. The fourth column\nype is any column which has been deflated.'), ('Z', 'Z is REAL array, dimension (K)\nhe first K elements of this array contain the components\nf the deflation-adjusted updating row vector.'), ('INFO', 'INFO is INTEGER\n 0:  successful exit.\n 0:  if INFO = -i, the i-th argument had an illegal value.\n 0:  if INFO = 1, a singular value did not converge'))
