(('zgbmv', 'ZGBMV  performs one of the matrix-vector operations\n\n   y := alpha*A*x + beta*y,   or   y := alpha*A**T*x + beta*y,   or\n\n   y := alpha*A**H*x + beta*y,\n\nwhere alpha and beta are scalars, x and y are vectors and A is an\nm by n band matrix, with kl sub-diagonals and ku super-diagonals.'), ('TRANS', "TRANS is CHARACTER*1\n On entry, TRANS specifies the operation to be performed as\n follows:\n\n    TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.\n\n    TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.\n\n    TRANS = 'C' or 'c'   y := alpha*A**H*x + beta*y."), ('M', 'M is INTEGER\n On entry, M specifies the number of rows of the matrix A.\n M must be at least zero.'), ('N', 'N is INTEGER\n On entry, N specifies the number of columns of the matrix A.\n N must be at least zero.'), ('KL', 'KL is INTEGER\n On entry, KL specifies the number of sub-diagonals of the\n matrix A. KL must satisfy  0 .le. KL.'), ('KU', 'KU is INTEGER\n On entry, KU specifies the number of super-diagonals of the\n matrix A. KU must satisfy  0 .le. KU.'), ('ALPHA', 'ALPHA is COMPLEX*16\n On entry, ALPHA specifies the scalar alpha.'), ('A', 'A is COMPLEX*16 array of DIMENSION ( LDA, n ).\n Before entry, the leading ( kl + ku + 1 ) by n part of the\n array A must contain the matrix of coefficients, supplied\n column by column, with the leading diagonal of the matrix in\n row ( ku + 1 ) of the array, the first super-diagonal\n starting at position 2 in row ku, the first sub-diagonal\n starting at position 1 in row ( ku + 2 ), and so on.\n Elements in the array A that do not correspond to elements\n in the band matrix (such as the top left ku by ku triangle)\n are not referenced.\n The following program segment will transfer a band matrix\n from conventional full matrix storage to band storage:\n\n       DO 20, J = 1, N\n          K = KU + 1 - J\n          DO 10, I = MAX( 1, J - KU ), MIN( M, J + KL )\n             A( K + I, J ) = matrix( I, J )\n    10    CONTINUE\n    20 CONTINUE'), ('LDA', 'LDA is INTEGER\n On entry, LDA specifies the first dimension of A as declared\n in the calling (sub) program. LDA must be at least\n ( kl + ku + 1 ).'), ('X', "X is COMPLEX*16 array of DIMENSION at least\n ( 1 + ( n - 1 )*abs( INCX ) ) when TRANS = 'N' or 'n'\n and at least\n ( 1 + ( m - 1 )*abs( INCX ) ) otherwise.\n Before entry, the incremented array X must contain the\n vector x."), ('INCX', 'INCX is INTEGER\n On entry, INCX specifies the increment for the elements of\n X. INCX must not be zero.'), ('BETA', 'BETA is COMPLEX*16\n On entry, BETA specifies the scalar beta. When BETA is\n supplied as zero then Y need not be set on input.'), ('Y', "Y is COMPLEX*16 array of DIMENSION at least\n ( 1 + ( m - 1 )*abs( INCY ) ) when TRANS = 'N' or 'n'\n and at least\n ( 1 + ( n - 1 )*abs( INCY ) ) otherwise.\n Before entry, the incremented array Y must contain the\n vector y. On exit, Y is overwritten by the updated vector y."), ('INCY', 'INCY is INTEGER\n On entry, INCY specifies the increment for the elements of\n Y. INCY must not be zero.'))
