(('dbdsdc', 'DBDSDC computes the singular value decomposition (SVD) of a real\nN-by-N (upper or lower) bidiagonal matrix B:  B = U * S * VT,\nusing a divide and conquer method, where S is a diagonal matrix\nwith non-negative diagonal elements (the singular values of B), and\nU and VT are orthogonal matrices of left and right singular vectors,\nrespectively. DBDSDC can be used to compute all singular values,\nand optionally, singular vectors or singular vectors in compact form.\n\nThis code makes very mild assumptions about floating point\narithmetic. It will work on machines with a guard digit in\nadd/subtract, or on those binary machines without guard digits\nwhich subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or Cray-2.\nIt could conceivably fail on hexadecimal or decimal machines\nwithout guard digits, but we know of none.  See DLASD3 for details.\n\nThe code currently calls DLASDQ if singular values only are desired.\nHowever, it can be slightly modified to compute singular values\nusing the divide and conquer method.'), ('UPLO', "UPLO is CHARACTER*1\n= 'U':  B is upper bidiagonal.\n= 'L':  B is lower bidiagonal."), ('COMPQ', "COMPQ is CHARACTER*1\nSpecifies whether singular vectors are to be computed\nas follows:\n= 'N':  Compute singular values only;\n= 'P':  Compute singular values and compute singular\n        vectors in compact form;\n= 'I':  Compute singular values and singular vectors."), ('N', 'N is INTEGER\nThe order of the matrix B.  N >= 0.'), ('D', 'D is DOUBLE PRECISION array, dimension (N)\nOn entry, the n diagonal elements of the bidiagonal matrix B.\nOn exit, if INFO=0, the singular values of B.'), ('E', 'E is DOUBLE PRECISION array, dimension (N-1)\nOn entry, the elements of E contain the offdiagonal\nelements of the bidiagonal matrix whose SVD is desired.\nOn exit, E has been destroyed.'), ('U', "U is DOUBLE PRECISION array, dimension (LDU,N)\nIf  COMPQ = 'I', then:\n   On exit, if INFO = 0, U contains the left singular vectors\n   of the bidiagonal matrix.\nFor other values of COMPQ, U is not referenced."), ('LDU', 'LDU is INTEGER\nThe leading dimension of the array U.  LDU >= 1.\nIf singular vectors are desired, then LDU >= max( 1, N ).'), ('VT', "VT is DOUBLE PRECISION array, dimension (LDVT,N)\nIf  COMPQ = 'I', then:\n   On exit, if INFO = 0, VT**T contains the right singular\n   vectors of the bidiagonal matrix.\nFor other values of COMPQ, VT is not referenced."), ('LDVT', 'LDVT is INTEGER\nThe leading dimension of the array VT.  LDVT >= 1.\nIf singular vectors are desired, then LDVT >= max( 1, N ).'), ('Q', "Q is DOUBLE PRECISION array, dimension (LDQ)\nIf  COMPQ = 'P', then:\n   On exit, if INFO = 0, Q and IQ contain the left\n   and right singular vectors in a compact form,\n   requiring O(N log N) space instead of 2*N**2.\n   In particular, Q contains all the DOUBLE PRECISION data in\n   LDQ >= N*(11 + 2*SMLSIZ + 8*INT(LOG_2(N/(SMLSIZ+1))))\n   words of memory, where SMLSIZ is returned by ILAENV and\n   is equal to the maximum size of the subproblems at the\n   bottom of the computation tree (usually about 25).\nFor other values of COMPQ, Q is not referenced."), ('IQ', "IQ is INTEGER array, dimension (LDIQ)\nIf  COMPQ = 'P', then:\n   On exit, if INFO = 0, Q and IQ contain the left\n   and right singular vectors in a compact form,\n   requiring O(N log N) space instead of 2*N**2.\n   In particular, IQ contains all INTEGER data in\n   LDIQ >= N*(3 + 3*INT(LOG_2(N/(SMLSIZ+1))))\n   words of memory, where SMLSIZ is returned by ILAENV and\n   is equal to the maximum size of the subproblems at the\n   bottom of the computation tree (usually about 25).\nFor other values of COMPQ, IQ is not referenced."), ('WORK', "WORK is DOUBLE PRECISION array, dimension (MAX(1,LWORK))\nIf COMPQ = 'N' then LWORK >= (4 * N).\nIf COMPQ = 'P' then LWORK >= (6 * N).\nIf COMPQ = 'I' then LWORK >= (3 * N**2 + 4 * N)."), ('IWORK', 'IWORK is INTEGER array, dimension (8*N)'), ('INFO', 'INFO is INTEGER\n= 0:  successful exit.\n< 0:  if INFO = -i, the i-th argument had an illegal value.\n> 0:  The algorithm failed to compute a singular value.\n      The update process of divide and conquer failed.'))
